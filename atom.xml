<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨小慧的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wenhuiyang-luck.github.io/"/>
  <updated>2017-07-20T13:38:33.990Z</updated>
  <id>https://wenhuiyang-luck.github.io/</id>
  
  <author>
    <name>杨小慧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>腾讯课堂IMWeb前端求职训练营-Day02</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/20/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82IMWeb%E5%89%8D%E7%AB%AF%E6%B1%82%E8%81%8C%E8%AE%AD%E7%BB%83%E8%90%A5-Day02/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/20/腾讯课堂IMWeb前端求职训练营-Day02/</id>
    <published>2017-07-20T13:31:38.983Z</published>
    <updated>2017-07-20T13:38:33.990Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>知识点：一个完整的<code>HTTP</code>事务、<code>Web</code>攻击技术、<code>Ajax</code>、优雅降级和渐进增强。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、经典面试题"><a href="#一、经典面试题" class="headerlink" title="一、经典面试题"></a>一、经典面试题</h1><h2 id="5-一次完整的HTTP事务是怎样的一个过程？"><a href="#5-一次完整的HTTP事务是怎样的一个过程？" class="headerlink" title="5. 一次完整的HTTP事务是怎样的一个过程？"></a>5. 一次完整的HTTP事务是怎样的一个过程？</h2><p>基本流程：</p>
<p>a. 域名解析</p>
<p>b. 发起<code>TCP</code>的<code>3</code>次握手</p>
<p>c. 建立<code>TCP</code>连接后发起<code>http</code>请求</p>
<p>d. 服务器端响应<code>http</code>请求，浏览器得到<code>html</code>代码</p>
<p>e. 浏览器解析<code>html</code>代码，并请求<code>html</code>代码中的资源</p>
<p>f. 浏览器对页面进行渲染呈现给用户</p>
<h2 id="6-你所了解到的Web攻击技术"><a href="#6-你所了解到的Web攻击技术" class="headerlink" title="6. 你所了解到的Web攻击技术?"></a>6. 你所了解到的Web攻击技术?</h2><p>1）<code>XSS</code>（Cross-Site Scripting，跨站脚本攻击）：指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或者JavaScript进行的一种攻击。</p>
<p>2）<code>SQL</code>注入攻击。</p>
<p>3）<code>CSRF</code>（Cross-Site Request Forgeries，跨站点请求伪造）：指攻击者通过设置好的陷阱，强制对已完成的认证用户进行非预期的个人信息或设定信息等某些状态更新。</p>
<h2 id="7-Ajax是什么-Ajax的交互模型-同步和异步的区别-如何解决跨域问题"><a href="#7-Ajax是什么-Ajax的交互模型-同步和异步的区别-如何解决跨域问题" class="headerlink" title="7. Ajax是什么? Ajax的交互模型? 同步和异步的区别? 如何解决跨域问题?"></a>7. Ajax是什么? Ajax的交互模型? 同步和异步的区别? 如何解决跨域问题?</h2><p><strong>1）Ajax是什么</strong></p>
<p><code>ajax</code>是异步的 <code>JavaScript</code> 和 <code>XML</code>。通过在后台与服务器进行少量数据交换，<code>AJAX</code> 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
<p><strong>2）Ajax的交互模型</strong></p>
<ul>
<li>1–启动  获取<code>XMlHttpRequest</code>对象</li>
<li>2–<code>open</code> 打开<code>url</code>通道，并设置异步传输 </li>
<li>3–<code>send</code> 发送数据到服务器</li>
<li>4–服务器接受数据并处理，处理完成后返回结果 </li>
<li>5–客户端接收服务器端返回</li>
</ul>
<p><strong>3）同步和异步的区别</strong></p>
<p>同步：脚本会停留并等待服务器发送回复然后再继续</p>
<p>异步：脚本允许页面继续其进程并处理可能的回复</p>
<p><strong>4）Ajax跨域的解决方法</strong></p>
<p>如果在A网站中，我们希望使用<code>Ajax</code>来获得B网站中的特定内容，如果A网站与B网站不在同一个域中，那么就出现了跨域访问问题。</p>
<p><code>IE</code>对于跨域访问的处理是，弹出警告框，提醒用户。如果用户将该网站纳入可信任网站，或者调低安全级别，那么这个问题IE就不会在提醒你。</p>
<p><code>FireFox</code>等其它非微软的浏览器遇到跨域访问，则解决方案统一是拒绝访问。几个可行的方案：</p>
<ul>
<li><code>Web</code>代理的方式。</li>
<li><code>on-Demand</code>方式</li>
<li><code>iframe</code>方式。</li>
<li>用户本地转储方式</li>
</ul>
<h2 id="8-什么叫优雅降级和渐进增强？"><a href="#8-什么叫优雅降级和渐进增强？" class="headerlink" title="8.什么叫优雅降级和渐进增强？"></a>8.什么叫优雅降级和渐进增强？</h2><p><strong>“都关注于同一网站在不同设备里不同浏览器下的表现程度。”</strong></p>
<p>渐进增强 ( progressive enhancement )： 针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>
<p>优雅降级( graceful degradation )： 一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>
<p><strong>区别：</strong> </p>
<p>a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给 ；</p>
<p>b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要 ；</p>
<p>c. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带；</p>
<h1 id="二、编程题"><a href="#二、编程题" class="headerlink" title="二、编程题"></a>二、编程题</h1><h2 id="4-末尾添加元素"><a href="#4-末尾添加元素" class="headerlink" title="4. 末尾添加元素"></a>4. 末尾添加元素</h2><p><strong>题目</strong>：在数组 <code>arr</code> 末尾添加元素 <code>item</code>。不要直接修改数组 <code>arr</code>，结果返回新的数组。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 常规方法 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span></span>(arr, item) &#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">new</span><span class="type">Arr</span>.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">new</span><span class="type">Arr</span>.push(item);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* slice 方法*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span></span>(arr, item) &#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = arr.slice(<span class="number">0</span>);    <span class="comment">// slice(start, end（可选）); 返回部分数组，不修改原数组。</span></div><div class="line">    <span class="keyword">new</span><span class="type">Arr</span>.push(item);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* concat 方法*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span></span>(arr, item) &#123;</div><div class="line">    <span class="keyword">return</span> arr.concat(item);     <span class="comment">// 数组合并，不改变原数组。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="5-删除数组的第一个元素"><a href="#5-删除数组的第一个元素" class="headerlink" title="5. 删除数组的第一个元素"></a>5. 删除数组的第一个元素</h2><p><strong>题目</strong>：删除数组 <code>arr</code> 第一个元素。不要直接修改数组 <code>arr</code>，结果返回新的数组。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curtail</span></span>(arr) &#123;</div><div class="line">	<span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = arr.slice(<span class="number">0</span>);</div><div class="line">    <span class="keyword">new</span><span class="type">Arr</span>.shift();         <span class="comment">// unshift：头部添加；shift：头部删除。</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="6-根据idx和item添加元素"><a href="#6-根据idx和item添加元素" class="headerlink" title="6. 根据idx和item添加元素"></a>6. 根据idx和item添加元素</h2><p><strong>题目</strong>：在数组 <code>arr</code> 的 <code>index</code> 处添加元素 <code>item</code>。不要直接修改数组 <code>arr</code>，结果返回新的数组。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"> * splice(idx, num, item)；idx：要删除的起始位置；num（可选）：要删除的个数；</div><div class="line"> * item（可选）：要添加的项；返回被删除的元素；修改原数组。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span></span>(arr, item, index) &#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = arr.slice(<span class="number">0</span>);</div><div class="line">    <span class="keyword">new</span><span class="type">Arr</span>.splice(index, <span class="number">0</span>, item);    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知识点：一个完整的&lt;code&gt;HTTP&lt;/code&gt;事务、&lt;code&gt;Web&lt;/code&gt;攻击技术、&lt;code&gt;Ajax&lt;/code&gt;、优雅降级和渐进增强。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ES5中新增的Array方法——forEach()</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/19/ES5%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84Array%E6%96%B9%E6%B3%95/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/19/ES5中新增的Array方法/</id>
    <published>2017-07-19T14:36:17.739Z</published>
    <updated>2017-07-19T14:47:02.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>forEach</code>是<code>Array</code>新方法中最基本的一个，用于遍历，循环。</p>
</blockquote>
<a id="more"></a>
<h2 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h2><h3 id="1-语法："><a href="#1-语法：" class="headerlink" title="1. 语法："></a>1. 语法：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array.forEach(callback[, thisObject])</div></pre></td></tr></table></figure>
<h3 id="2-参数："><a href="#2-参数：" class="headerlink" title="2. 参数："></a>2. 参数：</h3><p><code>callback</code>：</p>
<p>用来测试每个元素的回调函数。callback被调用时传入三个参数：元素值，元素的索引，原数组。</p>
<p><code>thisObject</code>：</p>
<p>执行 callback 时使用的 this 值，为<strong>可选</strong>参数。如果省略该参数，则 callback  被调用时的 this 值，在非严格模式下为全局对象（浏览器中为window），在严格模式下传入 undefined。</p>
<h3 id="3-实例："><a href="#3-实例：" class="headerlink" title="3. 实例："></a>3. 实例：</h3><p><strong>举例1：数组求和</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 只关心数组元素的值，可以编写只有一个参数的函数，额外的参数将忽略</span></div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].forEach(value) &#123;</div><div class="line">    sum += value;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(sum);  <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p><strong>举例2：每个数组元素的值自加1</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 关注数组元素的值，索引以及数组本身</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, idx, arr</span>) </span>&#123;</div><div class="line">    arr[idx] = item + <span class="number">1</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [2,3,4,5]</span></div></pre></td></tr></table></figure>
<p><strong>举例3：指定this的值</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> database = &#123;</div><div class="line">    <span class="attr">users</span>: [<span class="string">"张含韵"</span>, <span class="string">"江一燕"</span>, <span class="string">"李小璐"</span>],</div><div class="line">    <span class="attr">sendEmail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isValidUser(user)) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"你好，"</span> + user);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"抱歉，"</span>+ user +<span class="string">"，你不是本家人"</span>);	</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isValidUser</span>: <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="regexp">/^张/</span>.test(user);   <span class="comment">// 正则匹配张姓</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 给每个人发邮件</span></div><div class="line">database.users.forEach(database.sendEmail, database);  <span class="comment">// 使用database代替this</span></div><div class="line"></div><div class="line"><span class="comment">// 结果：</span></div><div class="line"><span class="comment">// 你好，张含韵</span></div><div class="line"><span class="comment">// 抱歉，江一燕，你不是本家人</span></div><div class="line"><span class="comment">// 抱歉，李小璐，你不是本家</span></div></pre></td></tr></table></figure>
<p><strong>举例4：forEach不会遍历“空元素”</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,,,<span class="number">3</span>];         <span class="comment">// 未赋值元素的值为undefined</span></div><div class="line"><span class="built_in">console</span>.log(arr.length);   <span class="comment">// 数组长度仍为4</span></div><div class="line">arr.forEach(<span class="built_in">console</span>.log);  <span class="comment">// 遍历结果只打印1和3</span></div></pre></td></tr></table></figure>
<h3 id="5-IE6-8兼容扩展"><a href="#5-IE6-8兼容扩展" class="headerlink" title="5. IE6-8兼容扩展"></a>5. IE6-8兼容扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach != <span class="string">"function"</span>) &#123;</div><div class="line">    <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span> (<span class="params">fn, context</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">        	<span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">"function"</span> &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">        		fn.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);  <span class="comment">// fn.apply(context, [this[i], i, this]);</span></div><div class="line">        	&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-终止循环"><a href="#6-终止循环" class="headerlink" title="6. 终止循环"></a>6. 终止循环</h3><p><code>forEach()</code>无法在所有元素都传递给调用的函数之前终止遍历，也就是说，没有像<code>for</code>循环中使用的相应的<code>break</code>语句。如果要提前终止，必须把<code>forEach()</code>方法放在一个<code>try</code>块中，并能抛出一个异常。如果<code>forEach()</code>调用的函数抛出<code>foreach.break</code>异常，循环会提前终止。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foreach</span>(<span class="params">a,f,t</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;a.forEach(f,t);&#125;</div><div class="line">    <span class="keyword">catch</span>(e) &#123;</div><div class="line">        <span class="keyword">if</span>(e === foreach.break) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">foreach.break = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"StopIteration"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt;是&lt;code&gt;Array&lt;/code&gt;新方法中最基本的一个，用于遍历，循环。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://wenhuiyang-luck.github.io/categories/JavaScript/"/>
    
    
      <category term="Array" scheme="https://wenhuiyang-luck.github.io/tags/Array/"/>
    
      <category term="ES5" scheme="https://wenhuiyang-luck.github.io/tags/ES5/"/>
    
  </entry>
  
  <entry>
    <title>腾讯课堂IMWeb前端求职训练营-Day01</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/19/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82IMWeb%E5%89%8D%E7%AB%AF%E6%B1%82%E8%81%8C%E8%AE%AD%E7%BB%83%E8%90%A5-Day01/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/19/腾讯课堂IMWeb前端求职训练营-Day01/</id>
    <published>2017-07-19T09:31:12.389Z</published>
    <updated>2017-07-19T09:53:36.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>知识点：盒子模型、src和href的区别、同步和异步、Dom节点操作。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、经典面试题"><a href="#一、经典面试题" class="headerlink" title="一、经典面试题"></a>一、经典面试题</h1><h2 id="1-什么是盒子模型？"><a href="#1-什么是盒子模型？" class="headerlink" title="1. 什么是盒子模型？"></a>1. 什么是盒子模型？</h2><ul>
<li><strong>盒模型</strong>： 内容(content)、填充(padding)、边界(margin)、 边框(border)</li>
<li><strong>两种</strong>: 标准 W3C 盒子模型、IE 盒子模型</li>
<li><strong>区别</strong>：IE的content部分包含了 border 和 padding</li>
</ul>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/FlbflSTD-RokStTYxHw1KlIzosBx" alt="img"></p>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/FrYThnUmgmNJscbN6S9UQH8qMSQH" alt="img"></p>
<h2 id="2-简述一下src与href的区别"><a href="#2-简述一下src与href的区别" class="headerlink" title="2. 简述一下src与href的区别?"></a>2. 简述一下src与href的区别?</h2><p><strong>href</strong>指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。</p>
<p><strong>src</strong>是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</p>
<h2 id="3-简述同步和异步的区别"><a href="#3-简述同步和异步的区别" class="headerlink" title="3. 简述同步和异步的区别?"></a>3. 简述同步和异步的区别?</h2><p>同步是阻塞模式，异步是非阻塞模式。</p>
<p>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；</p>
<p>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。</p>
<p>举个例子：普通B/S模式（同步）AJAX技术（异步）  </p>
<p>同步：提交请求 -&gt; 等待服务器处理（这个期间客户端浏览器不能干任何事）-&gt; 处理完毕返回</p>
<p>异步：请求通过事件触发 -&gt; 服务器处理（这是浏览器仍然可以作其他事情）-&gt; 处理完</p>
<h2 id="4-怎样添加、移除、移动、复制、创建和查找节点？"><a href="#4-怎样添加、移除、移动、复制、创建和查找节点？" class="headerlink" title="4. 怎样添加、移除、移动、复制、创建和查找节点？"></a>4. 怎样添加、移除、移动、复制、创建和查找节点？</h2><p>1）创建新节点</p>
<pre><code>createDocumentFragment() //创建一个DOM片段
createElement() //创建一个具体的元素
createTextNode() //创建一个文本节点
</code></pre><p>2）添加、移除、替换、插入</p>
<pre><code>appendChild() //添加
removeChild() //移除
replaceChild() //替换
insertBefore() //插入
</code></pre><p>3）查找</p>
<pre><code>getElementsByTagName() //通过标签名称
getElementsByName() //通过元素的Name属性的值
getElementById() //通过元素Id，唯一性
</code></pre><h1 id="二、编程题"><a href="#二、编程题" class="headerlink" title="二、编程题"></a>二、编程题</h1><h2 id="1-查找数组元素位置"><a href="#1-查找数组元素位置" class="headerlink" title="1. 查找数组元素位置"></a>1. 查找数组元素位置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">indexOf</span>(<span class="params">arr, item</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">Array</span>.prototype.indexOf)&#123;</div><div class="line">        <span class="keyword">return</span> arr.indexOf(item);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(arr[i] === item)&#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">     &#125;     </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-求和"><a href="#2-求和" class="headerlink" title="2. 求和"></a>2. 求和</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 递归</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> len = arr.length;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>] + sum(arr.slice(<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 常规循环</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">        s += arr[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 函数式编程 map-reduce</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span><span class="params">(prev, curr, idx, arr)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> prev + curr;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// forEach遍历</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</div><div class="line">    arr.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(val, idx, arr)</span> </span>&#123;</div><div class="line">        s += val;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// eval</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">eval</span>(arr.join(<span class="string">"+"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-移除数组中与item相等的元素"><a href="#3-移除数组中与item相等的元素" class="headerlink" title="3. 移除数组中与item相等的元素"></a>3. 移除数组中与item相等的元素</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 常规循环</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span></span>(arr,item)&#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] != item)&#123;</div><div class="line">            <span class="keyword">new</span><span class="type">Arr</span>.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// filter</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span></span>(arr,item)&#123;</div><div class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span></span>(s)&#123;</div><div class="line">        <span class="keyword">if</span>(s != item)&#123;</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        &#125;</div><div class="line">    &#125;)；</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知识点：盒子模型、src和href的区别、同步和异步、Dom节点操作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>iframe 标签嵌套页面</title>
    <link href="https://wenhuiyang-luck.github.io/2017/05/18/iframe%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/"/>
    <id>https://wenhuiyang-luck.github.io/2017/05/18/iframe嵌套页面/</id>
    <published>2017-05-18T02:04:48.879Z</published>
    <updated>2017-05-18T12:31:16.962Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们常常会希望将某种小效果可以直接在文档中显示，而不是通过一个预览外链来查看效果，<code>iframe</code> 元素就可以实现，它会创建包含另外一个文档的内联框架（即行内框架），<code>iframe</code>相当于浏览器里面有个小浏览器，在这个小浏览器中，打开另一个网页。可根据自己的需求自行设置<code>frameborder</code>及<code>scrolling</code>等属性。</p>
</blockquote>
<a id="more"></a>
<h4 id="1-属性"><a href="#1-属性" class="headerlink" title="1. 属性"></a>1. 属性</h4><p>有标记的是h5新属性</p>
<p><img src="../../../../images/24-1.png" alt=""></p>
<h4 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h4><p>本博客使用<code>markdown</code>编写，只需要在内容中嵌入<code>iframe</code>标签即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://wenhuiyang-luck.github.io/jquery-plugin/手风琴/index.html"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"400px"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一些老的浏览器不支持 iframe。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果得不到支持，iframe 是不可见的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>效果如下：</strong><br>点击试试手风琴效果吧</p>
<iframe src="https://wenhuiyang-luck.github.io/jquery-plugin/%E6%89%8B%E9%A3%8E%E7%90%B4/index.html" width="100%" height="400px" frameborder="0" scrolling="no"></iframe>

]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们常常会希望将某种小效果可以直接在文档中显示，而不是通过一个预览外链来查看效果，&lt;code&gt;iframe&lt;/code&gt; 元素就可以实现，它会创建包含另外一个文档的内联框架（即行内框架），&lt;code&gt;iframe&lt;/code&gt;相当于浏览器里面有个小浏览器，在这个小浏览器中，打开另一个网页。可根据自己的需求自行设置&lt;code&gt;frameborder&lt;/code&gt;及&lt;code&gt;scrolling&lt;/code&gt;等属性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTML/HTML5笔记" scheme="https://wenhuiyang-luck.github.io/categories/HTML-HTML5%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="https://wenhuiyang-luck.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>天猫仿站：4产品页面——基本详情</title>
    <link href="https://wenhuiyang-luck.github.io/2017/05/16/%E5%A4%A9%E7%8C%AB%E4%BB%BF%E7%AB%99%EF%BC%9A4%E4%BA%A7%E5%93%81%E9%A1%B5%E9%9D%A2%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E8%AF%A6%E6%83%85/"/>
    <id>https://wenhuiyang-luck.github.io/2017/05/16/天猫仿站：4产品页面——基本详情/</id>
    <published>2017-05-16T13:51:37.769Z</published>
    <updated>2017-05-16T14:48:38.260Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>产品页面之基本详情页中用到的“左边固定，右边自动占满”布局。相应的写一“左右固定，中间自适应”布局。</p>
</blockquote>
<a id="more"></a>
<p><img src="../../../../images/23-1.png" alt=""></p>
<p><a href="https://wenhuiyang-luck.github.io/Worklists/%E4%BB%BF%E7%AB%99/4-%E4%BA%A7%E5%93%81%E9%A1%B5%E9%9D%A2/4-%E4%BA%A7%E5%93%81%E9%A1%B5%E9%9D%A2_%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF.html">预览地址</a></p>
<h4 id="1-左边固定，右边自动占满"><a href="#1-左边固定，右边自动占满" class="headerlink" title="1. 左边固定，右边自动占满"></a>1. 左边固定，右边自动占满</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">   <span class="attribute">float</span>:left;</div><div class="line">   <span class="attribute">background-color</span>:pink</div><div class="line">  &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">    <span class="attribute">background-color</span>:lightskyblue;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边自动填满<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/hegi/12/edit" target="_blank" rel="external">效果预览</a></p>
<h4 id="2-左右固定，中间自适应的布局（浮动）"><a href="#2-左右固定，中间自适应的布局（浮动）" class="headerlink" title="2. 左右固定，中间自适应的布局（浮动）"></a>2. 左右固定，中间自适应的布局（浮动）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">   <span class="attribute">float</span>:left;</div><div class="line">   <span class="attribute">background-color</span>:pink</div><div class="line">  &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">   <span class="attribute">float</span>:right;</div><div class="line">   <span class="attribute">background-color</span>:pink</div><div class="line">  &#125;</div><div class="line"><span class="selector-class">.center</span> &#123;</div><div class="line">   <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">200px</span>;   </div><div class="line">   <span class="attribute">background-color</span>:lightblue</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/hegi/7/edit" target="_blank" rel="external">效果预览</a></p>
<p>这里需要注意三个<code>div</code>的顺序：<code>左-右-中</code>，中间的<code>div</code>最后写，如果写在中间，会发生什么呢？</p>
<p><a href="http://js.jirengu.com/hegi/14/edit" target="_blank" rel="external">我来瞧瞧发生了什么</a></p>
<p>可以看见最后一个<code>div</code>掉下去了，这是因为中间的div没有设置浮动，放在中间div后面的div会换行。下面介绍用<code>position</code>定位实现这种布局。</p>
<h4 id="3-左右固定，中间自适应的布局（定位）"><a href="#3-左右固定，中间自适应的布局（定位）" class="headerlink" title="3. 左右固定，中间自适应的布局（定位）"></a>3. 左右固定，中间自适应的布局（定位）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">* &#123;</div><div class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">   <span class="attribute">position</span>: absolute;</div><div class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">   <span class="attribute">background-color</span>: pink;</div><div class="line"> &#125;</div><div class="line"><span class="selector-class">.center</span>&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: lightblue;</div><div class="line"> &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: pink;</div><div class="line"> &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/hegi/16/edit" target="_blank" rel="external">效果预览</a></p>
<p>这种布局就和div的顺序无关了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;产品页面之基本详情页中用到的“左边固定，右边自动占满”布局。相应的写一“左右固定，中间自适应”布局。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/categories/%E4%BB%BF%E7%AB%99/"/>
    
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/tags/%E4%BB%BF%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>天猫仿站：3分类页面——排序和价格</title>
    <link href="https://wenhuiyang-luck.github.io/2017/05/14/%E5%A4%A9%E7%8C%AB%E4%BB%BF%E7%AB%99%EF%BC%9A3%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BB%B7%E6%A0%BC/"/>
    <id>https://wenhuiyang-luck.github.io/2017/05/14/天猫仿站：3分类页面——排序和价格/</id>
    <published>2017-05-14T14:04:56.516Z</published>
    <updated>2017-05-16T13:51:31.821Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>分类页面之排序和价格页面的布局。</p>
</blockquote>
<a id="more"></a>
<p><img src="../../../../images/22-1.png" alt=""></p>
<p><a href="https://wenhuiyang-luck.github.io/Worklists/%E4%BB%BF%E7%AB%99/3-%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2/3-%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2_%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BB%B7%E6%A0%BC.html">预览地址</a></p>
<h4 id="1-HTML结构"><a href="#1-HTML结构" class="headerlink" title="1. HTML结构"></a>1. HTML结构</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"categorySortBarTable categorySortTable"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"grayColumn"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>综合<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>人气<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新品<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>销量<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>价格<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-resize-vertical"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"categorySortBarTable"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span> <span class="attr">class</span>=<span class="string">"sortBarPrice beginPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"grayColumn priceMiddleColumn"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span> <span class="attr">class</span>=<span class="string">"sortBarPrice endPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-表格布局"><a href="#2-表格布局" class="headerlink" title="2. 表格布局"></a>2. 表格布局</h4><p>要实现上述效果中显示的，使排序项排列在一行，有多种方式，如float，inline，inline-block。<br>此处，我们要实现的效果不仅是排列在一行，此外每个排序项还需要边框，倘若不使用表格来做，而是使用span的border样式来做边框，那么相邻的两个span的边框会挨再一起，就是二倍宽度，看上去过粗。 为了解决过粗的问题，需要对每个span进行仅仅设置左边框，或者右边框，显而易见，此时增加了设置样式的复杂度。而使用table，只需要为td设置border边框，就可以达到效果。 容易很多，维护起来也更简单。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span><span class="selector-class">.categorySortBarTable</span> &#123;</div><div class="line">   <span class="attribute">border-collapse</span>: collapse;  <span class="comment">/*单元格之间没有空隙*/</span></div><div class="line">   <span class="attribute">display</span>: inline-block;      <span class="comment">/*显示为内联，既可以设置大小，又能够不换行*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">table</span><span class="selector-class">.categorySortBarTable</span> <span class="selector-tag">td</span> &#123;</div><div class="line">   <span class="attribute">height</span>: <span class="number">17px</span>;</div><div class="line">   <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">   <span class="attribute">padding</span>: <span class="number">3px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于border-collapse属性：<br>border-collapse: separate(默认,边框分隔) | collapse(边框合并)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">table</span><span class="selector-class">.t1</span>&#123;</div><div class="line">   <span class="attribute">border-collapse</span>:separate;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">table</span><span class="selector-class">.t2</span>&#123;</div><div class="line">   <span class="attribute">border-collapse</span>:collapse;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"t1"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框分离<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框分离<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"t2"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/geyas/2/edit" target="_blank" rel="external">预览</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分类页面之排序和价格页面的布局。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/categories/%E4%BB%BF%E7%AB%99/"/>
    
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/tags/%E4%BB%BF%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript算法题（1）—— Return Largest Numbers in Arrays</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/25/JavaScript%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94Return%20Largest%20Numbers%20in%20Arrays/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/25/JavaScript算法题（1）——Return Largest Numbers in Arrays/</id>
    <published>2017-04-25T02:03:57.160Z</published>
    <updated>2017-05-01T05:16:21.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.</p>
</blockquote>
<a id="more"></a>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">largestOfFour([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]);</div></pre></td></tr></table></figure>
<h2 id="1-Basic-Code-Solution"><a href="#1-Basic-Code-Solution" class="headerlink" title="1. Basic Code Solution"></a>1. Basic Code Solution</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> results = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">    <span class="keyword">var</span> largestNumber = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++)&#123;</div><div class="line">      <span class="keyword">if</span>(arr[i][j] &gt; largestNumber) &#123;</div><div class="line">        largestNumber = arr[i][j];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    results[i] = largestNumber;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>算法说明：</p>
<ul>
<li>创建results变量存储返回的结果数组；</li>
<li>创建一个外部循还遍历外层数组；<ul>
<li>创建内层循还遍历每一个内层数组，寻找最大值，存储在变量largestNumber中；</li>
<li>将每一个内层数组中的最大值保存在results中的相应位置；</li>
</ul>
</li>
<li>返回结果数组。</li>
</ul>
<h2 id="2-Intermediate-Code-Solution"><a href="#2-Intermediate-Code-Solution" class="headerlink" title="2. Intermediate Code Solution"></a>2. Intermediate Code Solution</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span><span class="params">(group)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> group.reduce(<span class="function"><span class="keyword">function</span><span class="params">(prev, current)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> (current &gt; prev) ? current:prev;</div><div class="line">    &#125;,<span class="number">0</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map?v=example" target="_blank" rel="external">Array.prototype.map()</a></li>
</ul>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=example" target="_blank" rel="external">Array.prototype.reduce()</a></li>
</ul>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank" rel="external">Ternary Operators(三元运算)</a></li>
</ul>
<h2 id="3-Advanced-Code-Solution"><a href="#3-Advanced-Code-Solution" class="headerlink" title="3. Advanced Code Solution"></a>3. Advanced Code Solution</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> largestOfFour(arr) &#123;</div><div class="line">  <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">Function</span>.<span class="title">apply</span></span>.<span class="keyword">bind</span>(Math.<span class="built_in">max</span>, null));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">Function.prototype.apply()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">Function.prototype.bind()</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="JavaScript" scheme="https://wenhuiyang-luck.github.io/tags/JavaScript/"/>
    
      <category term="Arrays" scheme="https://wenhuiyang-luck.github.io/tags/Arrays/"/>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>CSS sprites原理</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/24/CSS%20sprites%E5%8E%9F%E7%90%86/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/24/CSS sprites原理/</id>
    <published>2017-04-24T09:30:03.115Z</published>
    <updated>2017-05-01T05:13:34.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>解释CSS sprites原理及优缺点。</p>
</blockquote>
<a id="more"></a>
<p><code>CSS sprites</code>其实就是把网页中一些背景图片整合到一张图片中，再利用<code>CSS</code>的<code>background-image</code>，<code>background-repeat</code>，<code>background-position</code>的组合进行背景定位，<code>background-position</code>可以用数字精确的定位出背景图片的位置。</p>
<p><strong>优点：</strong></p>
<ol>
<li>减少网页的<code>http</code>请求。</li>
<li>减少图片的字节。</li>
<li>解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。</li>
<li>更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>在宽屏，高分辨率的屏幕下的自适应页面，图片如果不够宽，很容易出现背景断裂。</li>
<li><code>CSS sprites</code>在开发的时候，要通过<code>photoshop</code>或其他工具测量计算每一个背景单元的精确位置。</li>
<li>在维护的时候比较麻烦，如果页面背景有少许改动，一般就要改这张合并的图片。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解释CSS sprites原理及优缺点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>如何解决 “Another git process seems to be running in this repository”</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/23/How%20to%20fix%20error%20%E2%80%9CAnother%20git%20process%20seems%20to%20be%20running%20in%20this%20repository%E2%80%9D/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/23/How to fix error “Another git process seems to be running in this repository”/</id>
    <published>2017-04-23T03:57:22.281Z</published>
    <updated>2017-05-01T05:15:55.600Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>解决 git 推送中 “Another git process seems to be running in this repository” 问题。</p>
</blockquote>
<a id="more"></a>
<p><strong>错误：</strong></p>
<p><code>git bash</code>使用命令行<code>git commit</code>提交修改时，还未提交成功，就点了关闭按钮。再次提交时，出现了如下错误。</p>
<p><img src="../../../../images/19-1.png" alt=""></p>
<p>意思是说，当前已有一个编辑器打开了<code>“git commit”</code>指令，请关闭所有<code>git</code>相关的进程重试，否则，请手动删除那个文件。</p>
<p><strong>解决办法：</strong></p>
<p>根据我们所了解到的，<code>windows</code>对于进程的同步互斥管理，是有资源上锁机制的。猜测这里肯定是有进程对某资源进行了加锁，但是由于进程突然崩溃，未来得及解锁，导致其他进程访问不了。进入工作区目录下的隐藏文件夹<code>.git</code>中，可以看到有<code>index.lock</code>文件，只需要删除此文件，就可解决问题。</p>
<p>使用如下命令删除<code>index.lock</code>文件：</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm .git/<span class="keyword">index</span>.lock</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解决 git 推送中 “Another git process seems to be running in this repository” 问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="错误整理" scheme="https://wenhuiyang-luck.github.io/categories/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Github" scheme="https://wenhuiyang-luck.github.io/tags/Github/"/>
    
      <category term="Git" scheme="https://wenhuiyang-luck.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CSS浮动</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/20/CSS%E6%B5%AE%E5%8A%A8/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/20/CSS浮动/</id>
    <published>2017-04-20T07:06:35.214Z</published>
    <updated>2017-05-01T05:13:57.553Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>介绍CSS浮动，浮动对父级元素和布局的影响，以及清除浮动的方法。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-CSS浮动"><a href="#1-CSS浮动" class="headerlink" title="1. CSS浮动"></a>1. CSS浮动</h2><p>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</p>
<p>当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘：</p>
<p><img src="http://www.w3school.com.cn/i/ct_css_positioning_floating_right_example.gif" alt=""></p>
<p>当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。</p>
<p>如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。</p>
<p><img src="http://www.w3school.com.cn/i/ct_css_positioning_floating_left_example.gif" alt=""></p>
<p>如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”：</p>
<p><img src="http://www.w3school.com.cn/i/ct_css_positioning_floating_left_example_2.gif" alt=""></p>
<h2 id="2-浮动的影响"><a href="#2-浮动的影响" class="headerlink" title="2. 浮动的影响"></a>2. 浮动的影响</h2><h3 id="2-1-浮动对父级元素的影响"><a href="#2-1-浮动对父级元素的影响" class="headerlink" title="2.1 浮动对父级元素的影响"></a>2.1 浮动对父级元素的影响</h3><p>父级元素出现高度坍塌的问题。</p>
<p>解析：当没有为父元素设置高度时，父级元素的高度是由子元素的高度撑开的，当子元素浮动之后，就会脱离文档流，相当于是不存在于父级元素中，那么父级元素的高度就会塌陷为“0”。</p>
<h3 id="2-2-浮动对布局的影响"><a href="#2-2-浮动对布局的影响" class="headerlink" title="2.2 浮动对布局的影响"></a>2.2 浮动对布局的影响</h3><p>1.浮动能实现多个块元素处于同一行；<br>2.子级浮动会使父级出现高度塌陷问题；<br>3.浮动元素会对后面的兄弟级元素造成影响。</p>
<h2 id="3-清除浮动"><a href="#3-清除浮动" class="headerlink" title="3. 清除浮动"></a>3. 清除浮动</h2><p>正是因为浮动的这种特性，导致本属于普通流中的元素浮动之后，包含框中由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）。在实际布局中，往往这并不是我们所希望的，所以需要清除浮动，使其包含框表现出正常的高度。</p>
<h3 id="3-1-使用空标签清浮动"><a href="#3-1-使用空标签清浮动" class="headerlink" title="3.1 使用空标签清浮动"></a>3.1 使用空标签清浮动</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"clear:both;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<p>优点：通俗易懂，容易掌握<br>缺点：增加无意义的空标签，后期维护不方便，不推荐使用。</p>
<h3 id="3-2-使用br标签清浮动"><a href="#3-2-使用br标签清浮动" class="headerlink" title="3.2 使用br标签清浮动"></a>3.2 使用br标签清浮动</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float:left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float:left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">br</span> <span class="attr">clear</span>=<span class="string">"all"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>优点：比空标签方式语义稍强，代码量较少。<br>缺点：同样有违结构与表现的分离，不推荐使用。</p>
<h3 id="3-3-父级div定义-overflow-hidden"><a href="#3-3-父级div定义-overflow-hidden" class="headerlink" title="3.3 父级div定义 overflow: hidden"></a>3.3 父级div定义 overflow: hidden</h3><p>通过设置父元素overflow值设置为hidden；在IE6中还需要触发 hasLayout ，例如 zoom：1；</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"overflow:hidden; *zoom:1;"</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<p>优点：不存在结构和语义化问题，代码量极少。<br>缺点：无法显示溢出部分，不推荐使用。</p>
<h3 id="3-4-让父级发生浮动"><a href="#3-4-让父级发生浮动" class="headerlink" title="3.4 让父级发生浮动"></a>3.4 让父级发生浮动</h3><p>优点：不存在结构和语义化问题，代码量极少。<br>缺点：使得与父元素相邻的元素的布局会受到影响，不可能一直浮动到body，不推荐使用。</p>
<h3 id="3-5-利用after伪元素清浮动"><a href="#3-5-利用after伪元素清浮动" class="headerlink" title="3.5 利用after伪元素清浮动"></a>3.5 利用after伪元素清浮动</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>＝<span class="string">"clearfix"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:right;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span> &#123;*zoom:<span class="number">1</span>;&#125;</div><div class="line"><span class="selector-class">.clearfix</span>:after &#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">'.'</span>;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="attribute">height</span>:<span class="number">0px</span>;</div><div class="line">    <span class="attribute">clear</span>:both;</div><div class="line">    <span class="attribute">visibility</span>: hidden; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.<code>content:&quot;.&quot;;</code>  生成内容作为最后一个元素<br>2.<code>display:block;</code>  使生成的元素以块级元素显示，占满剩余空间;<br>3.<code>height:0px;</code>  避免生成内容破坏原有布局的高度。<br>4.<code>visibility:hidden;</code>  使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;</p>
<p>优点：结构和语义化完全正确，代码量居中。<br>缺点：复用方式不当会造成代码量增加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍CSS浮动，浮动对父级元素和布局的影响，以及清除浮动的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>position定位属性</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/20/position%E5%AE%9A%E4%BD%8D%E5%B1%9E%E6%80%A7/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/20/position定位属性/</id>
    <published>2017-04-20T03:31:05.652Z</published>
    <updated>2017-05-01T05:14:15.431Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>介绍position定位属性，绝对/固定定位的定位原理以及绝对/相对定位的区别。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-position定位属性有哪些"><a href="#1-position定位属性有哪些" class="headerlink" title="1. position定位属性有哪些"></a>1. position定位属性有哪些</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">position: static | <span class="type">relative</span> | <span class="type">absolute</span> | <span class="type">fixed</span> | <span class="type">inherit</span></div></pre></td></tr></table></figure>
<ul>
<li>static：默认值，没有定位；</li>
<li>relative：生成相对定位元素，相对于其正常位置进行定位；</li>
<li>absolute：生成绝对定位元素，相对于static以外的第一个父元素进行定位；</li>
<li>fixed：生成固定定位的元素，相对于浏览器窗口进行定位；</li>
<li>inherit：规定从父元素继承position属性的值。</li>
</ul>
<h2 id="2-绝对-固定定位的定位原理"><a href="#2-绝对-固定定位的定位原理" class="headerlink" title="2. 绝对/固定定位的定位原理"></a>2. 绝对/固定定位的定位原理</h2><ul>
<li><p><strong>绝对定位</strong>：absolute 相对于设置了除static定位以外的第一个父元素进行定位；</p>
</li>
<li><p><strong>固定定位</strong>：fixed相对于浏览器窗口进行定位</p>
<p>解析：</p>
</li>
</ul>
<ol>
<li>如果父级（无限）没有设定position属性，那么当前的absolute则结合top，right，left，bottom属性以浏览器左上角为原始点进行定位。</li>
<li>如果父级（无限）设定position属性，且属性值为relative、absolute、fixed，那么当前的absolute则结合top，right，left，bottom属性以父级（最近）的左上角为原始点进行定位。</li>
</ol>
<h2 id="3-绝对-相对定位的区别"><a href="#3-绝对-相对定位的区别" class="headerlink" title="3. 绝对/相对定位的区别"></a>3. 绝对/相对定位的区别</h2><p>​    主要从二者是否脱离文档流、是否会重叠、定位的参照物方面进行比较：</p>
<ol>
<li>相对定位不会脱离文档流，绝对定位脱离文档流；</li>
<li>绝对定位的元素相互层叠，相对定位的元素不会；</li>
<li>绝对定位的元素相对于static以外的第一个父元素进行定位，相对定位相对于其正常位置进行定位。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍position定位属性，绝对/固定定位的定位原理以及绝对/相对定位的区别。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>a标签伪类的书写顺序及原因</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/19/a%E6%A0%87%E7%AD%BE%E4%BC%AA%E7%B1%BB%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F%E5%8F%8A%E5%8E%9F%E5%9B%A0/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/19/a标签伪类的书写顺序及原因/</id>
    <published>2017-04-19T14:10:52.322Z</published>
    <updated>2017-05-01T05:18:24.010Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>a 标签书写顺序：<code>:link</code>, <code>:visited</code>,  <code>:hover</code>,  <code>:active</code>;  简记：<code>lvha</code>。</p>
</blockquote>
<a id="more"></a>
<ol>
<li>链接未进行访问时，显示 link 样式，也就是链接的默认样式；</li>
<li>当访问过了该链接，显示 visited 样式，由于两种选择器的优先级相等，必须让 visited 样式覆盖 link 样式，因此要先写 link 样式；</li>
<li>当鼠标移动到链接上时，可能是未访问也可能是已经访问， hover 样式要能够覆盖另外两种样式，因此 hover 要放在 visited 的后面；</li>
<li>当鼠标按下时，鼠标处于 a 标签之上（ hover 效果也处于激活状态），为了能够区分悬停和按下，需要让 active 样式覆盖 hover 样式，即 active 的样式放置在最后。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;a 标签书写顺序：&lt;code&gt;:link&lt;/code&gt;, &lt;code&gt;:visited&lt;/code&gt;,  &lt;code&gt;:hover&lt;/code&gt;,  &lt;code&gt;:active&lt;/code&gt;;  简记：&lt;code&gt;lvha&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>七种隐藏元素的方法</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/19/%E4%B8%83%E7%A7%8D%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/19/七种隐藏元素的方法/</id>
    <published>2017-04-19T13:46:02.177Z</published>
    <updated>2017-05-01T05:14:21.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>列举七种隐藏元素的方法。</p>
</blockquote>
<a id="more"></a>
<ol>
<li><code>visiable:hidden;</code>这个属性只是简单的隐藏某个元素，但是元素占用文档空间。<ol>
<li><code>opacity:0;</code>CSS3属性，可以使一个元素完全透明，与<code>visiable:hidden</code>效果相同。与<code>visiable</code>相比，它可以设置transition和animate。</li>
</ol>
</li>
<li><code>position:absolute;</code>使元素脱离文档流，处于普通文档之上，给它设置一个很大的<code>left</code>负值定位，使元素定位在可见区域之外。</li>
<li><code>display:none;</code>元素变得不可见，与<code>visiable:hidden</code>不同的是不会占用文档空间。</li>
<li><code>transform:scale(0);</code>将一个元素设置为无限小，这个元素将不可见，但是元素占用的空间仍然保留。</li>
<li><code>height:0;overflow:hidden;</code>将元素的高度设置为0，只要元素没有可见的边框，就可以使元素消失。</li>
<li><code>filter:blur(0);</code>将元素的模糊度设为0，从而使这个元素“消失”在页面中。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;列举七种隐藏元素的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>事件绑定</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/11/%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/11/事件绑定/</id>
    <published>2017-04-11T12:56:31.683Z</published>
    <updated>2017-05-01T05:15:04.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ol>
<li>如何在选定的元素上绑定一个或多个事件处理函数;</li>
<li>绑定鼠标滚轮事件;</li>
<li>如何判断鼠标滚轮方向;</li>
<li>绑定键盘方向键.</li>
</ol>
</blockquote>
<a id="more"></a>
<h4 id="1-如何在选定的元素上绑定一个或多个事件处理函数？"><a href="#1-如何在选定的元素上绑定一个或多个事件处理函数？" class="headerlink" title="1. 如何在选定的元素上绑定一个或多个事件处理函数？"></a>1. 如何在选定的元素上绑定一个或多个事件处理函数？</h4><p>语法：<code>on(events[,selector][,data],handler(eventObject))</code></p>
<p>描述：</p>
<ul>
<li><code>events</code>: 一个或多空格分隔的事件类型，例如 click keydown。</li>
<li><code>selector</code>: 一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素，如果为 null，那么被选中的元素总是能触发事件。</li>
<li><code>data</code>: 事件触发时，要传递给处理函数的 event.data。</li>
<li><code>handler(eventObject)</code>: 事件触发时，执行的函数。</li>
</ul>
<h4 id="2-绑定鼠标滚轮事件"><a href="#2-绑定鼠标滚轮事件" class="headerlink" title="2. 绑定鼠标滚轮事件"></a>2. 绑定鼠标滚轮事件</h4><ol>
<li>包括IE6浏览器在内都使用 mouseWheel, 而只有火狐浏览器使用 DOMMouseScroll;</li>
<li><code>$(document).on(&quot;mouseWheel DOMMouseScroll&quot;,handler)</code>.</li>
</ol>
<h4 id="3-如何判断鼠标滚轮方向"><a href="#3-如何判断鼠标滚轮方向" class="headerlink" title="3. 如何判断鼠标滚轮方向"></a>3. 如何判断鼠标滚轮方向</h4><ol>
<li>其他浏览器通过 wheeldalta 属性来判断，但是火狐浏览器没有这个属性，可以通过 detail 属性判断；</li>
<li>开发中发现每次向下滚动时，wheeldalta 都是-120，但是detail确是3，火狐浏览器方向判断的数值正负与其他浏览器是相反的。</li>
</ol>
<h4 id="4-绑定键盘方向键"><a href="#4-绑定键盘方向键" class="headerlink" title="4. 绑定键盘方向键"></a>4. 绑定键盘方向键</h4><ul>
<li>IE：只有<code>keyCode</code>属性;</li>
<li>Firefox：有<code>which</code>和<code>charCode</code>属性;</li>
<li>Opera：有<code>keyCode</code>和<code>which</code>属性;</li>
</ul>
<p>但是 jQuery 已经解决了这个兼容问题，通过<code>.witch</code>属性和<code>.keyCode</code>属性来确定按下了哪个键：</p>
<ul>
<li>arrow up：37</li>
<li>arrow left：38</li>
<li>arrow right：39</li>
<li>arrow down：40</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).on(<span class="string">"keydown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> keyCode = e.keyCode;</div><div class="line">    <span class="keyword">if</span>(keyCode == <span class="number">37</span> || keyCode == <span class="number">38</span>)&#123;</div><div class="line">    	...</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(keyCode == <span class="number">39</span> || keyCode == <span class="number">40</span>)&#123;</div><div class="line">		...</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如何在选定的元素上绑定一个或多个事件处理函数;&lt;/li&gt;
&lt;li&gt;绑定鼠标滚轮事件;&lt;/li&gt;
&lt;li&gt;如何判断鼠标滚轮方向;&lt;/li&gt;
&lt;li&gt;绑定键盘方向键.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript笔记" scheme="https://wenhuiyang-luck.github.io/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://wenhuiyang-luck.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>如何解决failed to push some refs to git</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/06/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3failed%20to%20push%20some%20refs%20to%20git/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/06/如何解决failed to push some refs to git/</id>
    <published>2017-04-06T09:38:20.341Z</published>
    <updated>2017-05-01T05:16:08.397Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>由于Github中的README.md文件不在本地代码目录中，导致执行git push -u origin master 时出现错误。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git commit -m <span class="string">"first commit"</span></div><div class="line">git remote <span class="keyword">add</span><span class="bash"> origin your Github repository</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<h5 id="1-在使用git-对源代码进行push到Github时出现如下错误信息："><a href="#1-在使用git-对源代码进行push到Github时出现如下错误信息：" class="headerlink" title="1. 在使用git 对源代码进行push到Github时出现如下错误信息："></a>1. 在使用git 对源代码进行push到Github时出现如下错误信息：</h5><p><code>error: failed to push some refs to</code></p>
<p><img src="../../../../images/13-1.png" alt=""></p>
<h5 id="2-出现错误的主要原因是Github中的README-md文件不在本地代码目录中"><a href="#2-出现错误的主要原因是Github中的README-md文件不在本地代码目录中" class="headerlink" title="2. 出现错误的主要原因是Github中的README.md文件不在本地代码目录中."></a>2. 出现错误的主要原因是Github中的README.md文件不在本地代码目录中.</h5><p>可以通过如下命令进行代码合并[ 注：pull=fetch+merge]</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull <span class="comment">--rebase origin master</span></div></pre></td></tr></table></figure>
<h5 id="3-执行上面代码后可以看到本地代码库中多了README-md文件"><a href="#3-执行上面代码后可以看到本地代码库中多了README-md文件" class="headerlink" title="3. 执行上面代码后可以看到本地代码库中多了README.md文件."></a>3. 执行上面代码后可以看到本地代码库中多了README.md文件.</h5><p>此时再执行以下语句即可完成代码上传到Github.</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于Github中的README.md文件不在本地代码目录中，导致执行git push -u origin master 时出现错误。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="错误整理" scheme="https://wenhuiyang-luck.github.io/categories/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Git" scheme="https://wenhuiyang-luck.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>一个页面从输入URL到页面显示完成的过程</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/02/%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E5%AE%8C%E6%88%90%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/02/一个页面从输入URL到页面显示完成的过程/</id>
    <published>2017-04-02T05:50:51.378Z</published>
    <updated>2017-05-01T05:17:38.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一个页面从输入url到页面加载显示完成，这个过程都发生了什么？</p>
</blockquote>
<a id="more"></a>
<h6 id="一个页面从输入url到页面加载显示完成的过程，大致分为以下几步："><a href="#一个页面从输入url到页面加载显示完成的过程，大致分为以下几步：" class="headerlink" title="一个页面从输入url到页面加载显示完成的过程，大致分为以下几步："></a>一个页面从输入url到页面加载显示完成的过程，大致分为以下几步：</h6><ol>
<li><p>浏览器地址栏输入url；</p>
</li>
<li><p>浏览器会先查看浏览器缓存–系统缓存–路由缓存，如有存在缓存，就直接显示。如果没有，接着第三步</p>
</li>
<li><p>DNS解析、查找该域名对应的IP地址、重定向（301）、发出第二个GET请求；</p>
</li>
<li><p>进行HTTP协议会话；</p>
</li>
<li><p>客户端发送报头（请求报头）；</p>
</li>
<li><p>服务器回馈报头（响应报头）；</p>
</li>
<li><p>html文档开始下载；</p>
</li>
<li><p>文档树建立，根据标记请求所需指定MIME类型的文件；</p>
</li>
<li><p>文件显示。</p>
</li>
</ol>
<hr>
<h6 id="浏览器这边做的工作大致分为以下几步："><a href="#浏览器这边做的工作大致分为以下几步：" class="headerlink" title="浏览器这边做的工作大致分为以下几步："></a>浏览器这边做的工作大致分为以下几步：</h6><ul>
<li><p>加载：根据请求的URL进行域名解析，向服务器发起请求，接收文件（HTML,  JS, CSS, Image等）。</p>
</li>
<li><p>解析：对加载到的资源（HTML,  JS, CSS, Image等）进行语法解析，建立响应的内部数据结构（比如HTML的DOM树，JS的（对象）属性表，CSS的样式规则等）。</p>
<p>​</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个页面从输入url到页面加载显示完成，这个过程都发生了什么？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Http" scheme="https://wenhuiyang-luck.github.io/categories/Http/"/>
    
    
      <category term="Http" scheme="https://wenhuiyang-luck.github.io/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>Hexo个人博客后期部署</title>
    <link href="https://wenhuiyang-luck.github.io/2017/03/30/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%90%8E%E6%9C%9F%E9%83%A8%E7%BD%B2/"/>
    <id>https://wenhuiyang-luck.github.io/2017/03/30/Hexo个人博客后期部署/</id>
    <published>2017-03-30T08:05:38.740Z</published>
    <updated>2017-05-01T05:18:10.414Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Hexo+Github个人博客后期部署的另一种方法。</p>
</blockquote>
<a id="more"></a>
<p>之前部署博客都是采用下面的方式：</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">new</span>(n) xxx    <span class="comment">//写文章</span></div><div class="line">$ hexo clean         <span class="comment">//清除缓存</span></div><div class="line">$ hexo <span class="keyword">generate</span>(g)   <span class="comment">//把文章生成页面</span></div><div class="line">$ hexo server(s)     <span class="comment">//启动本地服务调试</span></div><div class="line">$ hexo deploy(d)     <span class="comment">//部署到github 可与hexo g合并为 hexo d -g</span></div></pre></td></tr></table></figure>
<p>这种方式的commit记录：</p>
<p><img src="../../../../images/11-1.png" alt=""></p>
<p>另一种方式：</p>
<p>当我新增文章或者修改内容以后，先<code>hexo generate</code>生成静态页面，然后我每一次只需要将<code>public</code>文件夹<code>git push</code>到我的<code>github</code>上对应的博客仓库里即可。不需要再清除缓存。</p>
<p>可以通过<code>git status</code>查看文件状态，通过<code>git commit -m &quot;message&quot;</code>提交记录。</p>
<p>这种方式的commit记录：</p>
<p><img src="../../../../images/11-2.png" alt=""></p>
<p>是不是看起来清晰很多呢？嘻嘻 ^_^</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hexo+Github个人博客后期部署的另一种方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="https://wenhuiyang-luck.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://wenhuiyang-luck.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://wenhuiyang-luck.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="https://wenhuiyang-luck.github.io/2017/03/29/Flex%E5%B8%83%E5%B1%80/"/>
    <id>https://wenhuiyang-luck.github.io/2017/03/29/Flex布局/</id>
    <published>2017-03-29T13:29:16.330Z</published>
    <updated>2017-05-01T05:14:07.139Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>Flex</code>布局——W3C于2009年提出的一种新的布局方案。相比于传统的布局方式，即基于盒模型，依赖<code>display + position + float</code> 属性，<code>Flex</code>布局可以简便、完整、响应式地完成各种页面布局，而且目前已经得到了所有浏览器的支持。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-Flex容器"><a href="#1-Flex容器" class="headerlink" title="1. Flex容器"></a>1. Flex容器</h2><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt=""></p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<h2 id="2-容器的属性"><a href="#2-容器的属性" class="headerlink" title="2. 容器的属性"></a>2. 容器的属性</h2><p>共有6个容器属性：</p>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
<h3 id="2-1-flex-direction属性"><a href="#2-1-flex-direction属性" class="headerlink" title="2.1 flex-direction属性"></a>2.1 flex-direction属性</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>
<p><code>flex-direction:row | row-reverse | column | column-reverse;</code></p>
<p>它可能有4个值:</p>
<ul>
<li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>
<li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>
<li><code>column</code>：主轴为垂直方向，起点在上沿。</li>
<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>
</ul>
<h3 id="2-2-flex-wrap属性"><a href="#2-2-flex-wrap属性" class="headerlink" title="2.2 flex-wrap属性"></a>2.2 flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>
<p><code>flex-wrap: nowrap | wrap | wrap-reverse;</code></p>
<p>它可能有3个值:</p>
<ul>
<li><code>nowrap</code>（默认）：不换行。</li>
<li><code>wrap</code>：换行，第一行在上方。</li>
<li><code>wrap-reverse</code>：换行，第一行在下方。</li>
</ul>
<h3 id="2-3-flex-flow属性"><a href="#2-3-flex-flow属性" class="headerlink" title="2.3 flex-flow属性"></a>2.3 flex-flow属性</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<p><code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</code></p>
<h3 id="2-4-justify-content属性"><a href="#2-4-justify-content属性" class="headerlink" title="2.4 justify-content属性"></a>2.4 justify-content属性</h3><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>
<p><code>justify-content: flex-start | flex-end | center | space-between | space-around;</code></p>
<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<ul>
<li><code>flex-start</code>（默认值）：左对齐</li>
<li><code>flex-end</code>：右对齐</li>
<li><code>center</code>： 居中</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<h3 id="2-5-align-items属性"><a href="#2-5-align-items属性" class="headerlink" title="2.5 align-items属性"></a>2.5 align-items属性</h3><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>
<p><code>align-items: flex-start | flex-end | center | baseline | stretch;</code></p>
<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<ul>
<li><code>flex-start</code>：交叉轴的起点对齐。</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
<h3 id="2-6-align-content属性"><a href="#2-6-align-content属性" class="headerlink" title="2.6 align-content属性"></a>2.6 align-content属性</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<p><code>align-content: flex-start | flex-end | center | space-between | space-around | stretch;</code></p>
<p>该属性可能取6个值。</p>
<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
<p>以上。</p>
<h2 id="3-项目的属性"><a href="#3-项目的属性" class="headerlink" title="3. 项目的属性"></a>3. 项目的属性</h2><p>以下6个属性设置在项目上。</p>
<ul>
<li><code>order</code></li>
<li><code>flex-grow</code></li>
<li><code>flex-shrink</code></li>
<li><code>flex-basis</code></li>
<li><code>flex</code></li>
<li><code>align-self</code></li>
</ul>
<h3 id="3-1-order属性"><a href="#3-1-order属性" class="headerlink" title="3.1 order属性"></a>3.1 order属性</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<p><code>order: &lt;integer&gt;;</code></p>
<h3 id="3-2-flex-grow属性"><a href="#3-2-flex-grow属性" class="headerlink" title="3.2 flex-grow属性"></a>3.2 flex-grow属性</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<p><code>flex-grow: &lt;number&gt;; /* default 0 */</code></p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h3 id="3-3-flex-shrink属性"><a href="#3-3-flex-shrink属性" class="headerlink" title="3.3 flex-shrink属性"></a>3.3 flex-shrink属性</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<p><code>flex-shrink: &lt;number&gt;; /* default 1 */</code></p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
<h3 id="3-4-flex-basis属性"><a href="#3-4-flex-basis属性" class="headerlink" title="3.4 flex-basis属性"></a>3.4 flex-basis属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>
<p><code>flex-basis: &lt;length&gt; | auto; /* default auto */</code></p>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
<h3 id="3-5-flex属性"><a href="#3-5-flex属性" class="headerlink" title="3.5 flex属性"></a>3.5 flex属性</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>
<p><code>flex: none | [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? || &lt;&#39;flex-basis&#39;&gt; ]</code></p>
<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h3 id="3-6-align-self属性"><a href="#3-6-align-self属性" class="headerlink" title="3.6 align-self属性"></a>3.6 align-self属性</h3><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>
<p><code>align-self: auto | flex-start | flex-end | center | baseline | stretch;</code></p>
<p>该属性可能取6个值，除了<code>auto</code>，其他都与<code>align-items</code>属性完全一致。</p>
<h2 id="4-Flex实现水平、垂直居中"><a href="#4-Flex实现水平、垂直居中" class="headerlink" title="4. Flex实现水平、垂直居中"></a>4. Flex实现水平、垂直居中</h2><h3 id="4-1-单个元素水平居中"><a href="#4-1-单个元素水平居中" class="headerlink" title="4.1 单个元素水平居中"></a>4.1 单个元素水平居中</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* CSS 代码 */</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#0099cc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//HTML 代码</span></div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"box"</span>&gt;</div><div class="line">    &lt;h1&gt;单个元素水平居中&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/toyaquzaqe/1/edit" target="_blank" rel="external">效果预览</a></p>
<p>​    我们只需要给h1标签的父元素添加两个属性就可以了，<code>justify-content</code>其作用就是 让<code>class</code>类为<code>box</code>的div盒子居中。盒子居中了，盒子里面的元素就自然居中了，他的好处就是不需要对需居中的元素（h1）设置任何样式，如果：<code>width，margin</code>。</p>
<h3 id="4-2-多个h1元素水平居中"><a href="#4-2-多个h1元素水平居中" class="headerlink" title="4.2 多个h1元素水平居中"></a>4.2 多个h1元素水平居中</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// HTML 代码</span></div><div class="line"><span class="params">&lt;div class="box"&gt;</span></div><div class="line">    <span class="params">&lt;h1&gt;</span>多个h1元素水平居中<span class="params">&lt;/h1&gt;</span></div><div class="line">    <span class="params">&lt;h1&gt;</span>多个h1元素水平居中<span class="params">&lt;/h1&gt;</span></div><div class="line">    <span class="params">&lt;h1&gt;</span>多个h1元素水平居中<span class="params">&lt;/h1&gt;</span></div><div class="line"><span class="params">&lt;/div&gt;</span></div><div class="line"></div><div class="line"><span class="comment">/* CSS代码 */</span></div><div class="line">.box&#123;</div><div class="line"><span class="symbol">    display:</span> flex;</div><div class="line">    justify-content: center;</div><div class="line"><span class="symbol">    width:</span> <span class="number">100</span>%;</div><div class="line"><span class="symbol">    background:</span> <span class="meta">#0099cc</span></div><div class="line">&#125;</div><div class="line">h1&#123;</div><div class="line">    font-size: <span class="number">1</span>rem;</div><div class="line"><span class="symbol">    padding:</span> <span class="number">1</span>rem;</div><div class="line"><span class="symbol">    border:</span> <span class="number">1</span>px dashed <span class="meta">#FFF;</span></div><div class="line"><span class="symbol">    color:</span> <span class="meta">#fff;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/makuyuvobe/2/edit" target="_blank" rel="external">效果预览</a></p>
<p>​    在Flex有两个东西，一个是<code>Flex</code>容器（子项目父元素），另一个是子项目（Flex容器子元素）。如果不给<code>.box</code>添加样式， 一个<code>h1</code>标签占一行，也就是页面会显示三行文字 “多个h1元素水平居中”。如果我们给<code>.box</code>添加了<code>display: flex;</code>那么三个<code>h1</code>标签就妥妥地在一行里排列了，相当于浮动，只不过他不会因为超出了<code>.box</code>的宽度而换行，他总是会在一行内显示。</p>
<h3 id="4-3-单个h1标签垂直居中"><a href="#4-3-单个h1标签垂直居中" class="headerlink" title="4.3 单个h1标签垂直居中"></a>4.3 单个h1标签垂直居中</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// HTML 代码</span></div><div class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"box"</span>&gt;</div><div class="line">    &lt;h1&gt;单个h1标签垂直居中&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line"><span class="comment">/* CSS代码 */</span></div><div class="line">.box&#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">width</span>: <span class="number">980px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">30rem</span>;</div><div class="line">    <span class="attribute">align-items</span>:center;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#0099cc</span></div><div class="line">&#125;</div><div class="line">h1&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#FFF</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#FFF</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/biyovanere/3/edit" target="_blank" rel="external">效果预览</a></p>
<h3 id="4-4-多个h1标签垂直居中"><a href="#4-4-多个h1标签垂直居中" class="headerlink" title="4.4 多个h1标签垂直居中"></a>4.4 多个h1标签垂直居中</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// HTML 代码</span></div><div class="line"><span class="params">&lt;div class="box"&gt;</span></div><div class="line">    <span class="params">&lt;h1&gt;</span>单个h1标签垂直居中<span class="params">&lt;/h1&gt;</span></div><div class="line">    <span class="params">&lt;h1&gt;</span>单个h1标签垂直居中<span class="params">&lt;/h1&gt;</span></div><div class="line">    <span class="params">&lt;h1&gt;</span>单个h1标签垂直居中<span class="params">&lt;/h1&gt;</span></div><div class="line"><span class="params">&lt;/div&gt;</span></div><div class="line"></div><div class="line"><span class="comment">/* CSS代码 */</span></div><div class="line">.box&#123;</div><div class="line"><span class="symbol">    display:</span> flex;</div><div class="line"><span class="symbol">    width:</span> <span class="number">980</span>px;</div><div class="line"><span class="symbol">    height:</span> <span class="number">30</span>rem;</div><div class="line">    align-items:center;</div><div class="line"><span class="symbol">    background:</span> <span class="meta">#0099cc</span></div><div class="line">&#125;</div><div class="line">h1&#123;</div><div class="line">    font-size: <span class="number">1</span>rem;</div><div class="line"><span class="symbol">    padding:</span> <span class="number">1</span>rem;</div><div class="line"><span class="symbol">    border:</span> <span class="number">1</span>px dashed <span class="meta">#FFF;</span></div><div class="line"><span class="symbol">    color:</span> <span class="meta">#FFF</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/biyovanere/4/edit" target="_blank" rel="external">效果预览</a></p>
<h3 id="4-5-多个h1标签水平垂直居中"><a href="#4-5-多个h1标签水平垂直居中" class="headerlink" title="4.5 多个h1标签水平垂直居中"></a>4.5 多个h1标签水平垂直居中</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// HTML 代码</span></div><div class="line"><span class="params">&lt;div class="box"&gt;</span></div><div class="line">    <span class="params">&lt;h1&gt;</span>多个h1标签水平垂直居中<span class="params">&lt;/h1&gt;</span></div><div class="line">    <span class="params">&lt;h1&gt;</span>多个h1标签水平垂直居中<span class="params">&lt;/h1&gt;</span></div><div class="line">    <span class="params">&lt;h1&gt;</span>多个h1标签水平垂直居中<span class="params">&lt;/h1&gt;</span></div><div class="line">    <span class="params">&lt;h1&gt;</span>多个h1标签水平垂直居中<span class="params">&lt;/h1&gt;</span></div><div class="line"><span class="params">&lt;/div&gt;</span></div><div class="line"></div><div class="line"><span class="comment">/* CSS代码 */</span></div><div class="line">body&#123;display: flex;justify-content:center&#125;</div><div class="line">.box&#123;</div><div class="line"><span class="symbol">    display:</span> flex;</div><div class="line"><span class="symbol">    width:</span> <span class="number">980</span>px;</div><div class="line"><span class="symbol">    height:</span> <span class="number">30</span>rem;</div><div class="line"><span class="symbol">    background:</span> <span class="meta">#0099cc;</span></div><div class="line">    justify-content:center;</div><div class="line">    flex-direction:column;</div><div class="line">    align-items:center;</div><div class="line">&#125;</div><div class="line">h1&#123;</div><div class="line"><span class="symbol">    display:</span> flex;</div><div class="line">    justify-content:center;</div><div class="line">    font-size: <span class="number">1</span>rem;</div><div class="line"><span class="symbol">    padding:</span> <span class="number">1</span>rem;</div><div class="line"><span class="symbol">    border:</span> <span class="number">1</span>px dashed <span class="meta">#FFF;</span></div><div class="line"><span class="symbol">    color:</span> <span class="meta">#FFF;</span></div><div class="line"><span class="symbol">    width:</span> <span class="number">28</span>rem；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/nizateqoru/5/edit" target="_blank" rel="external">效果预览</a></p>
<p>​    为了让h1里的文字居中，我们给h1添加了<code>display:flex;</code> 以及<code>justify-content:center</code>，同样的为了让h1在<code>.box</code>里垂直居中，我们给<code>.box</code>也加上 <code>display:flex;</code>以及<code>justify-content:center</code>属性。而<code>.box</code>里的<code>align-items:center</code>就 是让h1水平居中的。这个属性的作用是：定义项目在交叉轴上的对齐方式。由于我们使用了 <code>flex-direction:column;</code>所以垂直方向作为主轴，交叉轴自然就是水平方向了。为了让<code>.box</code>也水平居中，我们同时也定义了<code>body{display:flex;justify- content:center}</code>。</p>
<p><strong>学习链接：</strong></p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="external">Flex布局教程：语法篇</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex布局教程：实例篇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Flex&lt;/code&gt;布局——W3C于2009年提出的一种新的布局方案。相比于传统的布局方式，即基于盒模型，依赖&lt;code&gt;display + position + float&lt;/code&gt; 属性，&lt;code&gt;Flex&lt;/code&gt;布局可以简便、完整、响应式地完成各种页面布局，而且目前已经得到了所有浏览器的支持。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
      <category term="Flex" scheme="https://wenhuiyang-luck.github.io/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>页面重绘（repaint）和页面回流（reflow）</title>
    <link href="https://wenhuiyang-luck.github.io/2017/03/14/%E9%A1%B5%E9%9D%A2%E9%87%8D%E7%BB%98%E5%92%8C%E9%A1%B5%E9%9D%A2%E5%9B%9E%E6%B5%81/"/>
    <id>https://wenhuiyang-luck.github.io/2017/03/14/页面重绘和页面回流/</id>
    <published>2017-03-14T11:42:31.607Z</published>
    <updated>2017-05-01T05:17:17.653Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如果你的HTML变得很大很复杂，那么影响你javaScript性能的可能并不是javaScript代码的复杂度，而是页面的回流和重绘。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-页面的渲染过程"><a href="#1-页面的渲染过程" class="headerlink" title="1. 页面的渲染过程"></a>1. 页面的渲染过程</h2><h3 id="1-1-解析HTML文件，创建DOM树"><a href="#1-1-解析HTML文件，创建DOM树" class="headerlink" title="1.1 解析HTML文件，创建DOM树"></a>1.1 解析HTML文件，创建DOM树</h3><p>浏览器将获取到的html代码解析成1个DOM树，html中的每个tag都是DOM树中的节点，根节点是document对象（即<html>标签)。DOM树包含了所有的html标签，包括<code>display: none</code> 的元素，还有js动态添加的元素等。</html></p>
<p><img src="http://www.w3school.com.cn/i/ct_htmltree.gif" alt="HTML DOM Node Tree"></p>
<h3 id="1-2-解析CSS"><a href="#1-2-解析CSS" class="headerlink" title="1.2 解析CSS"></a>1.2 解析CSS</h3><p>浏览器把所有样式（主要包括css和浏览器的样式设置）解析成样式结构体，在解析中去掉不能识别的样式，比如IE会去掉-moz开头的样式，而firefox会去掉_开头的样式。</p>
<h3 id="1-3-将CSS和DOM合并，构建渲染树（render-tree）"><a href="#1-3-将CSS和DOM合并，构建渲染树（render-tree）" class="headerlink" title="1.3 将CSS和DOM合并，构建渲染树（render tree）"></a>1.3 将CSS和DOM合并，构建渲染树（render tree）</h3><ul>
<li>render tree和dom tree类似，但其实区别很大，render tree能识别样式，render tree中的每个节点都有自己的样式，而且render tree忽略诸如head、diaplay: none的元素，因为这些样式不会影响页面的呈现。</li>
<li><strong>注意：</strong>visiability: hidden隐藏的元素还是会包含，因为它会影响布局，会占有空间。</li>
</ul>
<h3 id="1-4-布局和绘制"><a href="#1-4-布局和绘制" class="headerlink" title="1.4 布局和绘制"></a>1.4 布局和绘制</h3><p>一旦render tree构建完毕后，浏览器就可以根据render tree来绘制页面了。浏览器在绘制页面的过程中不断的进行着重绘和回流。</p>
<h2 id="2-重绘和回流"><a href="#2-重绘和回流" class="headerlink" title="2. 重绘和回流"></a>2. 重绘和回流</h2><h3 id="2-1-重绘和回流"><a href="#2-1-重绘和回流" class="headerlink" title="2.1 重绘和回流"></a>2.1 重绘和回流</h3><p><strong>重绘(repaint)：</strong>当render tree中的一些元素需要更新属性，单这些属性只会影响元素的外观，风格，而不会影响到元素的布局，此类的页面渲染叫作页面重绘。</p>
<p><strong>回流(reflow)：</strong>当render tree中的一部分（或全部）因为元素的规模尺寸，布局，隐藏等改变而引起的页面重新渲染。</p>
<p>可以看出，回流必将引起重绘，而重绘不一定会引起回流。</p>
<h3 id="2-2-引发回流的范例"><a href="#2-2-引发回流的范例" class="headerlink" title="2.2 引发回流的范例"></a>2.2 引发回流的范例</h3><p>当页面布局和几何属性改变时就需要回流。下述情况会发生浏览器回流：</p>
<ul>
<li>DOM树发生变化——如：增加一个元素或删除一个元素（元素为可见元素）；</li>
<li>通过style控制元素的位置变化——典型的碰壁反弹；</li>
<li>元素尺寸的改变——盒模型的每种尺寸均算在其内；</li>
<li>内容改变引发的尺寸改变——如：文本文本改变或者图片大小改变而引起的计算值宽度和高度改变；</li>
<li>浏览器窗口尺寸改变——resize事件发生时。</li>
</ul>
<h3 id="2-3-改善由于dom操作产生的回流"><a href="#2-3-改善由于dom操作产生的回流" class="headerlink" title="2.3 改善由于dom操作产生的回流"></a>2.3 改善由于dom操作产生的回流</h3><p>减少回流、重绘其实就是需要减少对render tree的操作，并减少对一些style信息的请求，尽量利用好浏览器的优化策略。具体方法有：</p>
<p><strong>（1）不要一个一个改变元素的样式属性，直接改变className，如果动态改变样式，则使用cssText。</strong></p>
<p><strong>如下面代码：</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不好的写法</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> top = <span class="number">1</span>;</div><div class="line">el.style.<span class="keyword">left</span> = <span class="keyword">left</span> + <span class="string">"px"</span>;</div><div class="line">el.style.<span class="keyword">right</span> = <span class="keyword">right</span> + <span class="string">"px"</span>;</div><div class="line"></div><div class="line"><span class="comment">//比较好的写法</span></div><div class="line">el.className += <span class="string">"className1"</span>;</div><div class="line"></div><div class="line"><span class="comment">//动态改变样式，比较好的写法</span></div><div class="line">el.style.cssText += <span class="string">";left:"</span> + <span class="keyword">left</span> + <span class="string">"px; top:"</span> + top + <span class="string">"px;"</span>;</div></pre></td></tr></table></figure>
<p><strong>（2）让要操作的元素进行“离线处理”，处理完后一起更新。这里所谓的”离线处理”即让元素不存在于render tree中，比如：</strong></p>
<ul>
<li>使用DocumentFragment进行缓存操作,引发一次回流和重绘；<ul>
<li>这个主要用于添加元素的时候，就是先把所有要添加到元素添加到1个div中(这个div也是新加的)，最后才把这个div append到body中。</li>
</ul>
</li>
<li>使用display:none技术，只引发两次回流和重绘；<ul>
<li>先display:none 隐藏元素，然后对该元素进行所有的操作，最后再显示该元素。因对display:none的元素进行操作不会引起回流、重绘。所以只要操作只会有2次回流。</li>
</ul>
</li>
<li>使用cloneNode(true or false) 和 replaceChild 技术，引发一次回流和重绘。</li>
</ul>
<p><strong>（3）不要经常访问会引起浏览器flush队列的属性，如果你确实要访问，利用缓存。</strong></p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//不好的写法</div><div class="line"><span class="keyword">for</span>(循环) &#123;</div><div class="line">     el.style.<span class="built_in">left</span> = el.offsetLeft + <span class="number">5</span> + <span class="string">"px"</span>;</div><div class="line">     el.style.<span class="built_in">top</span> = el.offsetTop + <span class="number">5</span> + <span class="string">"px"</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">// 比较好的写法</div><div class="line">var <span class="built_in">left</span> = el.offsetLeft,</div><div class="line">	<span class="built_in">top</span> = el.offsetTop,</div><div class="line">	s = el.style;</div><div class="line"><span class="keyword">for</span>(循环) &#123;</div><div class="line">     <span class="built_in">left</span> += <span class="number">10</span>;</div><div class="line">     <span class="built_in">top</span> += <span class="number">10</span>;</div><div class="line">     s.<span class="built_in">left</span> = <span class="built_in">left</span> + <span class="string">"px"</span>;</div><div class="line">     s.<span class="built_in">top</span> = <span class="built_in">top</span> + <span class="string">"px"</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><strong>（4）让元素脱离动画流，减少回流的Render Tree的规模。</strong></p>
<p>​    假设block1是position: absolute的元素，block2是position: relative的元素。当使用jquery的animate()方法移动元素来展示一些动画效果时：</p>
<p><code>$(&quot;#block1&quot;).animate({left:50});</code></p>
<p>​    block1移动，会影响到它父元素下的所有子元素。因为在移动过程中，所有子元素需要判断block1的z-index是否在自己的上面，如果是在自己的上面，则需要重绘，这里不会引起回流。</p>
<p><code>$(&quot;#block2&quot;).animate({marginLeft:50});</code></p>
<p>​    block2是相对定位的元素，影响的元素与block1一样，但是因为block2非绝对定位，而且改变的是marginLeft属性，所以这里每次改变不但会重绘，还会引起父元素及其下元素的回流。</p>
<p>​    所以，动画效果应用到position属性为absolute或fixed的元素上，它们不影响其他元素的布局，所它他们只会导致重新绘制，而不是一个完整回流。这样消耗会更低。</p>
<p><strong>参考链接：</strong></p>
<p><a href="http://www.zhangxinxu.com/wordpress/2010/01/%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%EF%BC%9Acss%E6%80%A7%E8%83%BD%E8%AE%A9javascript%E5%8F%98%E6%85%A2%EF%BC%9F/" target="_blank" rel="external">回流与重绘：CSS性能让JavaScript变慢？</a></p>
<p><a href="http://www.blogjava.net/BearRui/archive/2010/05/10/web_performance_repaint_relow.html" target="_blank" rel="external">高性能WEB开发(8) - 页面呈现、重绘、回流</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果你的HTML变得很大很复杂，那么影响你javaScript性能的可能并不是javaScript代码的复杂度，而是页面的回流和重绘。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="页面渲染" scheme="https://wenhuiyang-luck.github.io/categories/%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/"/>
    
    
      <category term="DOM" scheme="https://wenhuiyang-luck.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>Canvas实现放大镜效果</title>
    <link href="https://wenhuiyang-luck.github.io/2017/03/10/Canvas%E5%AE%9E%E7%8E%B0%E6%94%BE%E5%A4%A7%E9%95%9C%E6%95%88%E6%9E%9C/"/>
    <id>https://wenhuiyang-luck.github.io/2017/03/10/Canvas实现放大镜效果/</id>
    <published>2017-03-10T04:16:29.295Z</published>
    <updated>2017-05-01T05:13:05.625Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们在购物时，经常会看到这样的效果：当鼠标划过商品时，会在展示图旁边出现一个商品局部放大图，这就是放大镜效果。这个小效果可以由<code>HTML5</code>的<code>canvas</code>实现，主要依靠<code>canvas</code>中的<code>drawImage()</code>函数，可以初步认识<code>canvas</code>。让我们快点开始吧。</p>
</blockquote>
<a id="more"></a>
<p>效果图：</p>
<p><img src="../../../../images/8-1.png" alt=""></p>
<h2 id="1-实验原理"><a href="#1-实验原理" class="headerlink" title="1. 实验原理"></a>1. 实验原理</h2><p>一个<code>canvas</code>绘制好一张图片，当鼠标移到<code>canvas</code>上边的时候出现一个透明框，同时另一个<code>canvas(copycanvas)</code>开始绘制透明框部分的图像，利用<code>drawImage()</code>可修改绘制时的大小以实现放大效果。</p>
<p><strong>需要注意的细节：</strong></p>
<ul>
<li>透明框不能移除<code>canvas</code>；</li>
<li>鼠标移入、移出<code>canvas</code>时，<code>copycanvas</code>能对应的显示、隐藏。</li>
</ul>
<h2 id="2-需要用到的知识点介绍"><a href="#2-需要用到的知识点介绍" class="headerlink" title="2. 需要用到的知识点介绍"></a>2. 需要用到的知识点介绍</h2><h3 id="2-1-drawImage-函数"><a href="#2-1-drawImage-函数" class="headerlink" title="2.1 drawImage()函数"></a>2.1 drawImage()函数</h3><p>此函数为<code>canvas</code>绘制图像方法，即将图像绘制到<code>canvas</code>中，并将图像像素映射为<code>canvas</code>坐标系统的一个单元。</p>
<p><code>drawImage()</code>可以接受一下 3 套参数：</p>
<ul>
<li><code>drawImage(imagedata, dx, dy);</code>此方法会将整幅图像绘制到 <code>canvas</code>的指定位置上，<code>dx ，dy</code>分别指目标 <code>canvas</code> 开始绘制点的 <code>x , y</code>坐标。</li>
<li><code>drawImage(imagedata, dx, dy , dw, dh);</code>此套参数中新增的<code>2</code>个参数<code>dw,dh</code>分别代表绘制时指定的宽和高（也因此实现缩放的效果）。</li>
<li><code>drawImage(imagedata, sx, sy, sw, sh, dx, dy, dw, dh);</code>此套参数中又新增了<code>4</code>个参数<code>sx, sy, sw, sh</code>,分别代表被绘制图像开始绘制点的 <code>x, y</code>坐标，以及被绘制部分的宽和高。</li>
</ul>
<h3 id="2-2-Dom-Event-对象"><a href="#2-2-Dom-Event-对象" class="headerlink" title="2.2 Dom Event 对象"></a>2.2 Dom Event 对象</h3><p>当然完成放大镜效果，最终达到和商品展示的放大效果一致，光是 <code>canvas</code> 的图像绘制还是不够的。当我们在商品展示图上移动鼠标能及时看到效果，这就是需要 <code>Dom Event</code> 对象的支持，介绍几个项目中涉及到的对象：</p>
<ul>
<li><code>onmouseover</code> 鼠标移动到某元素之上触发事件</li>
<li><code>onmousemove</code> 鼠标在某元素之上移动时触发事件</li>
</ul>
<h3 id="2-3-Dom-Element-对象"><a href="#2-3-Dom-Element-对象" class="headerlink" title="2.3 Dom Element 对象"></a>2.3 Dom Element 对象</h3><p>当我们想要控制透明选择框不移出<code>canvas</code>，就需要时刻计算透明选择框和<code>canvas</code>的边距关系，这便涉及到接下来我要介绍的几个 <code>Dom Element</code> 对象：</p>
<ul>
<li><code>offsetLeft</code> 返回元素水平偏移量(从上到下开始计算)</li>
<li><code>offsetTop</code> 返回元素垂直偏移量(从左到右开始计算)</li>
</ul>
<h2 id="3-步骤"><a href="#3-步骤" class="headerlink" title="3. 步骤"></a>3. 步骤</h2><h3 id="3-1-页面设计"><a href="#3-1-页面设计" class="headerlink" title="3.1 页面设计"></a>3.1 页面设计</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"430"</span> <span class="attr">height</span>=<span class="string">"430"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"copycanvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"square"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-2-简单的样式设计"><a href="#3-2-简单的样式设计" class="headerlink" title="3.2 简单的样式设计"></a>3.2 简单的样式设计</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#copycanvas</span> &#123;</div><div class="line">   	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">   	<span class="attribute">display</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#square</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">90px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">90px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#cc3</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f00</span>;</div><div class="line">	<span class="attribute">opacity</span>: <span class="number">0.5</span>;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">z-index</span>: <span class="number">999</span>;</div><div class="line">	<span class="attribute">display</span>: none;</div><div class="line">	<span class="attribute">cursor</span>: crosshair;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-3-javascript部分"><a href="#3-3-javascript部分" class="headerlink" title="3.3 javascript部分"></a>3.3 javascript部分</h3><h4 id="3-3-1-定义所需变量和共有对象-创建图像对象，并加载"><a href="#3-3-1-定义所需变量和共有对象-创建图像对象，并加载" class="headerlink" title="3.3.1 定义所需变量和共有对象,创建图像对象，并加载"></a>3.3.1 定义所需变量和共有对象,创建图像对象，并加载</h4><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var <span class="keyword">canvas</span> = document.getElementById(<span class="string">'canvas'</span>), <span class="comment">//获取canvas对象</span></div><div class="line">	context = <span class="keyword">canvas</span>.getContext(<span class="string">'2d'</span>),  <span class="comment">//获取上下文</span></div><div class="line"></div><div class="line">	copycanvas = document.getElementById(<span class="string">'copycanvas'</span>),  <span class="comment">//获取copycanvas</span></div><div class="line">	copycontext = copycanvas.getContext(<span class="string">'2d'</span>),</div><div class="line"></div><div class="line">	square = document.getElementById(<span class="string">'square'</span>),  <span class="comment">//获取透明框</span></div><div class="line">	squaredata = &#123;&#125;, <span class="comment">//用来保存选择框数据</span></div><div class="line"></div><div class="line">	box = <span class="keyword">canvas</span>.getBoundingClientRect();  </div><div class="line">	<span class="comment">//getBoundingClientRect方法可以获取元素上、下、左、右分别相对浏览器的坐标位置</span></div><div class="line"></div><div class="line"><span class="comment">//创建图像对象，并加载</span></div><div class="line"><span class="keyword">image</span> = new Image();</div><div class="line"><span class="keyword">image</span>.src = <span class="string">"1.jpg"</span>;</div><div class="line"><span class="keyword">image</span>.onload = function()&#123;</div><div class="line">    context.drawImage(<span class="keyword">image</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">canvas</span>.width,<span class="keyword">canvas</span>.height);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-3-2-触发事件"><a href="#3-3-2-触发事件" class="headerlink" title="3.3.2 触发事件"></a>3.3.2 触发事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">canvas.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> x = e.clientX, <span class="comment">//获取鼠标实时坐标</span></div><div class="line">		y = e.clientY;</div><div class="line"></div><div class="line">	createSquare(x,y); <span class="comment">//保存透明选择框属性</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> x = e.clientX,</div><div class="line">		y = e.clientY;</div><div class="line"></div><div class="line">	<span class="comment">//判断鼠标是否移出canvas</span></div><div class="line">	<span class="keyword">if</span>(x &gt;= canvas.offsetLeft &amp;&amp; x &lt;= canvas.offsetLeft + canvas.width &amp;&amp; </div><div class="line">	   y &gt;= canvas.offsetTop &amp;&amp; y &lt;= canvas.offsetTop + canvas.height)&#123;</div><div class="line">		createSquare(x,y);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		hideSquare();</div><div class="line">		hideCanvas();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-3-3-显示、隐藏选择框和copycanvas"><a href="#3-3-3-显示、隐藏选择框和copycanvas" class="headerlink" title="3.3.3 显示、隐藏选择框和copycanvas"></a>3.3.3 显示、隐藏选择框和copycanvas</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showSquare</span><span class="params">()</span></span>&#123;</div><div class="line">	square.style.display = <span class="string">'block'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hideSquare</span><span class="params">()</span></span>&#123;</div><div class="line">	square.style.display = <span class="string">'none'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCanvas</span><span class="params">()</span></span>&#123;</div><div class="line">	copycanvas.style.display = <span class="string">"inline"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hideCanvas</span><span class="params">()</span></span>&#123;</div><div class="line">	copycanvas.style.display = <span class="string">"none"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-3-4-移动鼠标同时实时移动选择框"><a href="#3-3-4-移动鼠标同时实时移动选择框" class="headerlink" title="3.3.4 移动鼠标同时实时移动选择框"></a>3.3.4 移动鼠标同时实时移动选择框</h4><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function createSquare(<span class="keyword">x</span>,y)&#123;    </div><div class="line">	//控制选择框不移动出canvas</div><div class="line">	<span class="keyword">x</span> = <span class="keyword">x</span> - <span class="number">45</span> &lt; canvas.offsetLeft ? canvas.offsetLeft:<span class="keyword">x</span> - <span class="number">45</span><span class="comment">;</span></div><div class="line">	y = y - <span class="number">45</span> &lt; canvas.offsetTop ? canvas.offsetTop:y - <span class="number">45</span><span class="comment">;</span></div><div class="line"></div><div class="line">	<span class="keyword">x</span> = <span class="keyword">x</span> + <span class="number">90</span> &lt; box.right ? <span class="keyword">x</span>:box.right - <span class="number">90</span><span class="comment">;</span></div><div class="line">	y = y + <span class="number">90</span> &lt; box.bottom ? y:box.bottom - <span class="number">90</span><span class="comment">;</span></div><div class="line"></div><div class="line">	squaredata.left = <span class="keyword">x</span><span class="comment">;</span></div><div class="line">	squaredata.top = y<span class="comment">;</span></div><div class="line">	moveSquare(<span class="keyword">x</span>,y)<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">function moveSquare(<span class="keyword">x</span>,y)&#123;</div><div class="line">	square.style.left = <span class="keyword">x</span> + <span class="string">"px"</span><span class="comment">;</span></div><div class="line">	square.style.top = y + <span class="string">"px"</span><span class="comment">;</span></div><div class="line">	showCanvas()<span class="comment">;</span></div><div class="line">	showSquare()<span class="comment">;</span></div><div class="line">	copy()<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-3-5-绘制canvas到copycanvas实现放大效果"><a href="#3-3-5-绘制canvas到copycanvas实现放大效果" class="headerlink" title="3.3.5 绘制canvas到copycanvas实现放大效果"></a>3.3.5 绘制canvas到copycanvas实现放大效果</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">copy</span>()&#123;</div><div class="line">	copycontext.drawImage(</div><div class="line">		canvas,          </div><div class="line">		squaredata.left - <span class="built_in">box</span>.left,</div><div class="line">    	squaredata.top - <span class="built_in">box</span>.top,</div><div class="line">    	<span class="number">90</span>,</div><div class="line">    	<span class="number">90</span>,</div><div class="line">    	<span class="number">0</span>,</div><div class="line">    	<span class="number">0</span>,</div><div class="line">    	copycanvas.<span class="built_in">width</span>,</div><div class="line">    	copycanvas.<span class="built_in">height</span></div><div class="line">	);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此，便完全实现了放大镜效果。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>网上也有各种版本的放大镜效果插件，比如<code>jQuery</code>插件。它的原理是，准备了一大一小且内容相同的两张图，然后通过设置大图的<code>position: absolute</code>，控制<code>left、right</code>属性，以及<code>overflow: hidden</code>，以此来模拟放大效果。显而易见，这样做无意义的增加了请求次数，浪费流量；而且并没有真正的实现图片的局部放大效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们在购物时，经常会看到这样的效果：当鼠标划过商品时，会在展示图旁边出现一个商品局部放大图，这就是放大镜效果。这个小效果可以由&lt;code&gt;HTML5&lt;/code&gt;的&lt;code&gt;canvas&lt;/code&gt;实现，主要依靠&lt;code&gt;canvas&lt;/code&gt;中的&lt;code&gt;drawImage()&lt;/code&gt;函数，可以初步认识&lt;code&gt;canvas&lt;/code&gt;。让我们快点开始吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTML/HTML5笔记" scheme="https://wenhuiyang-luck.github.io/categories/HTML-HTML5%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML5" scheme="https://wenhuiyang-luck.github.io/tags/HTML5/"/>
    
      <category term="Canvas" scheme="https://wenhuiyang-luck.github.io/tags/Canvas/"/>
    
  </entry>
  
</feed>
