<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨小慧的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wenhuiyang-luck.github.io/"/>
  <updated>2017-07-24T13:28:49.222Z</updated>
  <id>https://wenhuiyang-luck.github.io/</id>
  
  <author>
    <name>杨小慧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《剑指offer》JavaScript版——(5)用两个栈实现队列</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/24/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E2%80%94%20JavaScript%EF%BC%885%EF%BC%89%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/24/《剑指offer》— JavaScript（5）用两个栈实现队列/</id>
    <published>2017-07-24T13:33:53.965Z</published>
    <updated>2017-07-24T13:28:49.222Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <strong>题目：</strong>用两个栈来实现一个队列，完成队列的<code>Push</code>和<code>Pop</code>操作。 队列中的元素为<code>int</code>类型。</p>
</blockquote>
<a id="more"></a>
<p><strong>基础知识点：</strong></p>
<p><code>栈（stack）</code>又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p>
<p><code>队列</code>是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p>
<p><strong>思路：</strong><br>入队：将元素进栈1;<br>出队：判断栈2是否为空，如果为空，则将栈1中所有元素<code>pop</code>，并<code>push</code>进栈<code>2</code>，栈<code>2</code>出栈； 如果不为空，栈<code>2</code>直接出栈。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stack1 = [];</div><div class="line"><span class="keyword">var</span> stack2 = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">   stack1.push(node);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">if</span>(stack2.length == <span class="number">0</span>)&#123;</div><div class="line">      <span class="keyword">while</span>(stack1.length &gt; <span class="number">0</span>)&#123;</div><div class="line">         stack2.push(stack1.pop());</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> stack2.pop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;题目：&lt;/strong&gt;用两个栈来实现一个队列，完成队列的&lt;code&gt;Push&lt;/code&gt;和&lt;code&gt;Pop&lt;/code&gt;操作。 队列中的元素为&lt;code&gt;int&lt;/code&gt;类型。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="剑指offer" scheme="https://wenhuiyang-luck.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>《剑指offer》JavaScript版——(4)重建二叉树</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/24/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E2%80%94%20JavaScript%EF%BC%884%EF%BC%89%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/24/《剑指offer》— JavaScript（4）重建二叉树/</id>
    <published>2017-07-24T13:19:53.090Z</published>
    <updated>2017-07-24T13:22:09.127Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <strong>题目：</strong>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列<code>{1,2,4,7,3,5,6,8}</code>和中序遍历序列<code>{4,7,2,1,5,3,8,6}</code>，则重建二叉树并返回。</p>
</blockquote>
<a id="more"></a>
<p>思路：<br>前序遍历的第一个节点就是根节点，中序遍历根节点的左边在根节点的左子树，右边在根节点的右子树。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* function TreeNode(x) &#123;</span></div><div class="line">   this.val = x;</div><div class="line">   this.left = null;</div><div class="line">   this.right = null;</div><div class="line">&#125; */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reConstructBinaryTree</span>(<span class="params">pre, vin</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span>(pre.length == <span class="number">0</span> || vin.length == <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">var</span> idx = vin.indexOf(pre[<span class="number">0</span>]);    <span class="comment">// 根节点的索引  </span></div><div class="line">   </div><div class="line">   <span class="keyword">var</span> vinleft = vin.slice(<span class="number">0</span>, idx);  <span class="comment">// 中序左子树</span></div><div class="line">   <span class="keyword">var</span> vinright = vin.slice(idx+<span class="number">1</span>);  <span class="comment">// 中序右子树  </span></div><div class="line">   </div><div class="line">   <span class="keyword">var</span> preleft = pre.slice(<span class="number">1</span>,idx+<span class="number">1</span>); <span class="comment">// 前序左子树</span></div><div class="line">   <span class="keyword">var</span> preright = pre.slice(idx+<span class="number">1</span>);  <span class="comment">// 前序右子树    </span></div><div class="line">   <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">val</span>: pre[<span class="number">0</span>],</div><div class="line">      <span class="attr">left</span>: reConstructBinaryTree(preleft, vinleft),  <span class="comment">// 递归</span></div><div class="line">      right: reConstructBinaryTree(preright, vinright)</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;题目：&lt;/strong&gt;输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列&lt;code&gt;{1,2,4,7,3,5,6,8}&lt;/code&gt;和中序遍历序列&lt;code&gt;{4,7,2,1,5,3,8,6}&lt;/code&gt;，则重建二叉树并返回。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="剑指offer" scheme="https://wenhuiyang-luck.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>《剑指offer》JavaScript版——(3)从尾到头打印链表</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/24/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E2%80%94%20JavaScript%EF%BC%883%EF%BC%89%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/24/《剑指offer》— JavaScript（3）从尾到头打印链表/</id>
    <published>2017-07-24T13:19:24.453Z</published>
    <updated>2017-07-24T13:17:44.531Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <strong>题目：</strong>输入一个链表，从尾到头打印链表每个节点的值。</p>
</blockquote>
<a id="more"></a>
<p><strong>基础知识点：</strong><br>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</p>
<p><strong>思路：</strong><br>定义一个数组，将链表的节点依次从头部<code>unshift</code>进数组，将数组输出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*function ListNode(x)&#123;</span></div><div class="line">   this.val = x;</div><div class="line">   this.next = null;</div><div class="line">&#125;*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead</span>(<span class="params">head</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> arr = [];</div><div class="line">   <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">   <span class="keyword">while</span>(head) &#123;</div><div class="line">      arr.unshift(head.val);</div><div class="line">      head = head.next;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;题目：&lt;/strong&gt;输入一个链表，从尾到头打印链表每个节点的值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="剑指offer" scheme="https://wenhuiyang-luck.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>《剑指offer》JavaScript版——(2)替换空格</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/23/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E2%80%94%20JavaScript%EF%BC%882%EF%BC%89%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/23/《剑指offer》— JavaScript（2）替换空格/</id>
    <published>2017-07-23T14:55:57.574Z</published>
    <updated>2017-07-23T15:11:18.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>题目：</strong>请实现一个函数，将一个字符串中的空格替换成<code>%20</code>。例如，当字符串为<code>We Are Happy</code>.则经过替换之后的字符串为<code>We%20Are%20Happy</code>。</p>
</blockquote>
<a id="more"></a>
<p>思路：<br>使用正则表达式，调用<code>replace</code>函数。<br><code>\s</code>匹配任何不可见字符，包括空格、制表符、换页符等等。等价于<code>[\f\n\r\t\v]</code>。</p>
<p>AC代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace</span>(<span class="params">str</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//return str.replace(/\s+?/g, "%20");  // \s+? 非贪婪匹配 </span></div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/\s/g</span>, <span class="string">"%20"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>演示：</p>
<p><img src="../../../../images/offer2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;请实现一个函数，将一个字符串中的空格替换成&lt;code&gt;%20&lt;/code&gt;。例如，当字符串为&lt;code&gt;We Are Happy&lt;/code&gt;.则经过替换之后的字符串为&lt;code&gt;We%20Are%20Happy&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="剑指offer" scheme="https://wenhuiyang-luck.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>《剑指offer》JavaScript版——(1)二维数组中的查找</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/23/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E2%80%94%20JavaScript%EF%BC%881%EF%BC%89%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/23/《剑指offer》— JavaScript（1）二维数组中的查找/</id>
    <published>2017-07-23T14:50:52.261Z</published>
    <updated>2017-07-23T14:50:29.724Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>题目：</strong>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
</blockquote>
<a id="more"></a>
<p>思路：</p>
<p>有序矩阵，从左下角的元素开始，如果数组元素比target小，则上移；如果比target大，则右移。</p>
<p>AC代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target, array</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> row = array.length;</div><div class="line">    <span class="keyword">var</span> col = array[<span class="number">0</span>].length;</div><div class="line">     </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = row<span class="number">-1</span>,j = <span class="number">0</span>;(i &gt;= <span class="number">0</span>)&amp;&amp;(j &lt; col);)&#123;</div><div class="line">        <span class="keyword">if</span>(target &gt; array[i][j])&#123;</div><div class="line">            j++;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; array[i][j])&#123;</div><div class="line">            i--;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="剑指offer" scheme="https://wenhuiyang-luck.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>腾讯课堂IMWeb备战秋招-Day04</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/23/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82IMWeb%E5%89%8D%E7%AB%AF%E6%B1%82%E8%81%8C%E8%AE%AD%E7%BB%83%E8%90%A5-Day04/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/23/腾讯课堂IMWeb前端求职训练营-Day04/</id>
    <published>2017-07-23T13:40:50.458Z</published>
    <updated>2017-07-23T13:49:02.224Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>知识点：<code>null</code>和<code>undefined</code>、<code>new</code>操作符、内存泄漏、<code>Node</code>的优缺点。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、经典面试题"><a href="#一、经典面试题" class="headerlink" title="一、经典面试题"></a>一、经典面试题</h1><h2 id="13-null和undefined的区别？"><a href="#13-null和undefined的区别？" class="headerlink" title="13. null和undefined的区别？"></a>13. null和undefined的区别？</h2><p><code>null</code>用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象, 转为数值时为<code>0</code>；<code>undefined</code>是一个表示”无”的原始值，转为数值时为<code>NaN</code>。当声明的变量还未被初始化时，变量的默认值为<code>undefined</code>。</p>
<p>1.<code>null</code>表示”没有对象”，即该处不应该有值。典型用法是：<br>① 作为函数的参数，表示该函数的参数不是对象。<br>② 作为对象原型链的终点。</p>
<p>2.<code>undefined</code>表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：<br>① 变量被声明了，但没有赋值时，就等于<code>undefined</code>。<br>② 调用函数时，应该提供的参数没有提供，该参数等于<code>undefined</code>。<br>③ 对象没有赋值的属性，该属性的值为<code>undefined</code>。<br>④ 函数没有返回值时，默认返回<code>undefined</code>。</p>
<h2 id="14-new操作符具体干了什么呢"><a href="#14-new操作符具体干了什么呢" class="headerlink" title="14. new操作符具体干了什么呢?"></a>14. new操作符具体干了什么呢?</h2><p>① 创建一个空对象，并且<code>this</code> 变量引用该对象，同时还继承了该函数的原型。<br>② 属性和方法被加入到 <code>this</code> 引用的对象中。<br>③ 新创建的对象由 <code>this</code> 所引用，并且最后隐式的返回<code>this</code> 。</p>
<h2 id="15-哪些操作会造成内存泄漏？"><a href="#15-哪些操作会造成内存泄漏？" class="headerlink" title="15. 哪些操作会造成内存泄漏？"></a>15. 哪些操作会造成内存泄漏？</h2><p>内存泄漏指任何对象在不再拥有或需要它之后仍然存在。垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为<code>0</code>（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p>
<ul>
<li><code>setTimeout</code>的第一个参数使用字符串而非函数的话，会引发内存泄漏。</li>
<li>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）。</li>
</ul>
<h2 id="16-对Node的优点和缺点提出了自己的看法？"><a href="#16-对Node的优点和缺点提出了自己的看法？" class="headerlink" title="16. 对Node的优点和缺点提出了自己的看法？"></a>16. 对Node的优点和缺点提出了自己的看法？</h2><p><strong>优点</strong>：因为<code>Node</code>是基于事件驱动和无阻塞的，所以非常适合处理并发请求， 因此构建在<code>Node</code>上的代理服务器相比其他技术实现（如<code>Ruby</code>）的服务器表现要好得多。 此外，与<code>Node</code>代理服务器交互的客户端代码是由<code>javascript</code>语言编写的， 因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</p>
<p><strong>缺点</strong>：<code>Node</code>是一个相对新的开源项目，所以不太稳定，它总是一直在变， 而且缺少足够多的第三方库支持。看起来，就像是<code>Ruby/Rails</code>当年的样子。</p>
<h1 id="二、编程题"><a href="#二、编程题" class="headerlink" title="二、编程题"></a>二、编程题</h1><h2 id="1-颜色字符串转换"><a href="#1-颜色字符串转换" class="headerlink" title="1. 颜色字符串转换"></a>1. 颜色字符串转换</h2><p><strong>题目</strong>：将 rgb 颜色字符串转换为十六进制的形式，如 rgb(255, 255, 255) 转为 #ffffff；</p>
<ol>
<li>rgb 中每个 , 后面的空格数量不固定</li>
<li>十六进制表达式使用六位小写字母</li>
<li>如果输入不符合 rgb 格式，返回原始输入</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgb2hex</span>(<span class="params">sRGB</span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> sRGB.replace(<span class="regexp">/^rgb\((\d+)\s*,\s*(\d+)\s*,\s*(\d+)\)$/</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'#'</span>+toHex($<span class="number">1</span>)+toHex($<span class="number">2</span>)+toHex($<span class="number">3</span>);    <span class="comment">// $0:正则匹配的整个字符串; $1, $2, $3:捕获项</span></div><div class="line">   &#125;);</div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">toHex</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> (<span class="string">'0'</span>+(+str).toString(<span class="number">16</span>)).slice(<span class="number">-2</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-将字符串转为驼峰格式"><a href="#2-将字符串转为驼峰格式" class="headerlink" title="2. 将字符串转为驼峰格式"></a>2. 将字符串转为驼峰格式</h2><p><strong>题目</strong>：将类似 background-image 这种通过 - 连接的字符，转换成 backgroundImage 驼峰格式。</p>
<ol>
<li>以 - 为分隔符，将第二个起的非空单词首字母转为大写</li>
<li>-webkit-border-image 转换后的结果为 webkitBorderImage</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cssStyle2DomStyle</span>(<span class="params">sName</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> result = sName.replace(<span class="regexp">/^-/</span>,<span class="string">''</span>).split(<span class="string">'-'</span>);</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, len = result.length; i &lt; len; i++) &#123;</div><div class="line">      result[i] = result[i].replace(<span class="regexp">/^\w/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> s.toUpperCase();</div><div class="line">      &#125;)</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> result.join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cssStyle2DomStyle</span>(<span class="params">sName</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> arr = sName.split(<span class="string">''</span>);     </div><div class="line">   <span class="keyword">if</span>(arr.indexOf(<span class="string">'-'</span>) == <span class="number">0</span>)  <span class="comment">// 判断第一个是不是 '-'，是的话就删除 </span></div><div class="line">      arr.splice(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;   <span class="comment">// 处理剩余的'-'</span></div><div class="line">      <span class="keyword">if</span>(arr[i] == <span class="string">'-'</span>)&#123;</div><div class="line">         arr.splice(i,<span class="number">1</span>);</div><div class="line">         arr[i] = arr[i].toUpperCase();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> arr.join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-求二次方"><a href="#3-求二次方" class="headerlink" title="3. 求二次方"></a>3. 求二次方</h2><p><strong>题目</strong>：为数组 arr 中的每个元素求二次方。不要直接修改数组 arr，结果返回新的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* map 方法 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span>(<span class="built_in">Array</span>.prototype.map) &#123;</div><div class="line">      <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> item * item;</div><div class="line">      &#125;)</div><div class="line">   &#125;<span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">var</span> newArr = [];</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">         newArr.push(arr[i] * arr[i]);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> newArr;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* forEach 方法 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">arr</span>) </span>&#123;   </div><div class="line">   <span class="keyword">var</span> a = [];  <span class="comment">//声明一个新的数组存放结果</span></div><div class="line">   arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;      </div><div class="line">      a.push(e*e);  <span class="comment">//将arr中的每一个元素求平方后，加入到a数组中</span></div><div class="line">   &#125;);</div><div class="line">   <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知识点：&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;、&lt;code&gt;new&lt;/code&gt;操作符、内存泄漏、&lt;code&gt;Node&lt;/code&gt;的优缺点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>腾讯课堂IMWeb备战秋招-Day03</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/21/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82IMWeb%E5%89%8D%E7%AB%AF%E6%B1%82%E8%81%8C%E8%AE%AD%E7%BB%83%E8%90%A5-Day03/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/21/腾讯课堂IMWeb前端求职训练营-Day03/</id>
    <published>2017-07-21T12:46:37.569Z</published>
    <updated>2017-07-21T13:04:08.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>知识点：伪数组、浏览器本地存储、线程与进程、减少页面加载时间的方法。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、经典面试题"><a href="#一、经典面试题" class="headerlink" title="一、经典面试题"></a>一、经典面试题</h1><h2 id="9-什么是伪数组？如何将伪数组转化为标准数组？"><a href="#9-什么是伪数组？如何将伪数组转化为标准数组？" class="headerlink" title="9. 什么是伪数组？如何将伪数组转化为标准数组？"></a>9. 什么是伪数组？如何将伪数组转化为标准数组？</h2><p><strong>1）伪数组（类数组）一般具有以下特点：</strong></p>
<ul>
<li>按索引方式存储数据；</li>
<li>具有<code>length</code>属性；</li>
<li>没有数组的<code>push</code>、<code>shift</code>、<code>pop</code>等方法;</li>
</ul>
<p><code>function</code>的<code>arguments</code>对象，还有<code>getElementsByTagName</code>、<code>ele.childNodes</code>等返回的<code>NodeList</code>对象，或者自定义的某些对象，都可以是伪数组。</p>
<p><strong>2）如何将伪数组转化为标准数组？</strong></p>
<p>① 使用<code>Array.prototype.slice.call();</code></p>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/FqeJuVfqpiBd2xX7JLxQV42x6FXD" alt=""></p>
<p>② 使用<code>[].slice.call()</code>，本质上与第一种方法是一样的，但第一种方式效率更高。</p>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/Foqd7K8VfQekgAvK95OOHbUfOdsF" alt=""></p>
<p>③ 使用<code>ES6</code>中<code>Array.from</code>方法;</p>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/Flg3XlvriDfvOBho4_luxGrrdM1e" alt=""></p>
<h2 id="10-浏览器本地存储"><a href="#10-浏览器本地存储" class="headerlink" title="10. 浏览器本地存储?"></a>10. 浏览器本地存储?</h2><p>在较高版本的浏览器中，<code>js</code>提供了<code>sessionStorage</code>和<code>globalStorage</code>。在<code>HTML5</code>中提供<code>localStorage</code>来取代<code>globalStorage</code>。<code>html5</code>中的<code>Web Storage</code>包括了两种存储方式：<code>sessionStorage</code>和<code>localStorage</code>。</p>
<p><strong>1. 会话级别的本地存储：sessionStorage</strong></p>
<p>通过此对象可以直接操作存储在浏览器中的会话级别的<code>WebStorage</code>。存储在<code>sessionStorage</code>中的数据首先是<code>Key-Value</code>形式的，另外就是它跟浏览器当前会话相关，当会话结束后，数据会自动清除，跟未设置过期时间的<code>Cookie</code>类似。</p>
<p><code>sessionStorage</code>提供了四个方法来辅助我们进行对本地存储做相关操作。</p>
<ul>
<li><code>setItem(key,value)</code>：添加本地存储数据。两个参数，非常简单就不说了。</li>
<li><code>getItem(key)</code>：通过key获取相应的Value。</li>
<li><code>removeItem(key)</code>：通过key删除本地数据。</li>
<li><code>clear()</code>：清空数据。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">   <span class="comment">// 添加key-value 数据到 sessionStorage  </span></div><div class="line">   sessionStorage.setItem(<span class="string">"demokey"</span>, <span class="string">"http://blog.itjeek.com"</span>);   </div><div class="line">   <span class="keyword">var</span> dt = sessionStorage.getItem(<span class="string">"demokey"</span>);  <span class="comment">// 通过key来获取value</span></div><div class="line">   alert(dt);</div><div class="line">   sessionStorage.clear();                      <span class="comment">// 清空所有的key-value数据。</span></div><div class="line">   alert(sessionStorage.length);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><strong>2. 永久本地存储：localStorage</strong></p>
<p>数据不会随着<code>Http</code>请求发送到后台服务器，而且存储数据的大小几乎不用考虑，因为在<code>HTML5</code>的标准中要求浏览器至少要支持到<code>4MB</code>。所以，这完全是颠覆了<code>Cookie</code>的限制，为<code>Web</code>应用在本地存储复杂的用户痕迹数据提供非常方便的技术支持。<code>localStorage</code>的常用的方法，基本上跟<code>sessionStorage</code>是一致的。</p>
<h2 id="11-线程与进程的区别"><a href="#11-线程与进程的区别" class="headerlink" title="11. 线程与进程的区别?"></a>11. 线程与进程的区别?</h2><p>一个程序至少有一个进程,一个进程至少有一个线程；<br>线程的划分尺度小于进程，使得多线程程序的并发性高；<br>线程是独立调度的基本单位, 进程是拥有资源的基本单位；<br>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率；</p>
<p><strong>线程在执行过程中与进程还是有区别的:</strong></p>
<p>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p>
<h2 id="12-请说出三种减少页面加载时间的方法。"><a href="#12-请说出三种减少页面加载时间的方法。" class="headerlink" title="12. 请说出三种减少页面加载时间的方法。"></a>12. 请说出三种减少页面加载时间的方法。</h2><ol>
<li><strong>优化图片 </strong></li>
<li><strong>图像格式的选择</strong>（<code>GIF</code>：提供的颜色较少，可用在一些对颜色要求不高的地方） </li>
<li><strong>优化CSS</strong>（压缩合并<code>css</code>，如 <code>margin-top</code>, <code>margin-left</code>…) </li>
<li><strong>网址后加斜杠</strong></li>
<li><strong>标明图片的高度和宽度</strong>（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。 当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了） </li>
<li><strong>减少http请求</strong>（合并文件，合并图片）</li>
</ol>
<h1 id="二、编程题"><a href="#二、编程题" class="headerlink" title="二、编程题"></a>二、编程题</h1><h2 id="1-找出数组-arr-中重复出现过的元素"><a href="#1-找出数组-arr-中重复出现过的元素" class="headerlink" title="1. 找出数组 arr 中重复出现过的元素"></a>1. 找出数组 arr 中重复出现过的元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicates</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> a = [];</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length<span class="number">-1</span>; i++) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</div><div class="line">         arr[i] == arr[j] &amp;&amp; a.indexOf(arr[i]) == <span class="number">-1</span> &amp;&amp; a.push(arr[i]);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-时间格式化输出"><a href="#2-时间格式化输出" class="headerlink" title="2. 时间格式化输出"></a>2. 时间格式化输出</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">t,str</span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> obj = &#123;</div><div class="line">      <span class="attr">yyyy</span>:t.getFullYear(),</div><div class="line">      <span class="attr">yy</span>:(<span class="string">""</span>+ t.getFullYear()).slice(<span class="number">-2</span>),   </div><div class="line">      <span class="attr">M</span>:t.getMonth()+<span class="number">1</span>,</div><div class="line">      <span class="attr">MM</span>:(<span class="string">"0"</span>+ (t.getMonth()+<span class="number">1</span>)).slice(<span class="number">-2</span>),        </div><div class="line">      <span class="attr">d</span>:t.getDate(),</div><div class="line">      <span class="attr">dd</span>:(<span class="string">"0"</span> + t.getDate()).slice(<span class="number">-2</span>),        </div><div class="line">      <span class="attr">H</span>:t.getHours(),</div><div class="line">      <span class="attr">HH</span>:(<span class="string">"0"</span> + t.getHours()).slice(<span class="number">-2</span>),        </div><div class="line">      <span class="attr">h</span>:t.getHours() % <span class="number">12</span>,</div><div class="line">      <span class="attr">hh</span>:(<span class="string">"0"</span>+t.getHours() % <span class="number">12</span>).slice(<span class="number">-2</span>),        </div><div class="line">      <span class="attr">m</span>:t.getMinutes(),</div><div class="line">      <span class="attr">mm</span>:(<span class="string">"0"</span> + t.getMinutes()).slice(<span class="number">-2</span>),        </div><div class="line">      <span class="attr">s</span>:t.getSeconds(),</div><div class="line">      <span class="attr">ss</span>:(<span class="string">"0"</span> + t.getSeconds()).slice(<span class="number">-2</span>),        </div><div class="line">      <span class="attr">w</span>:[<span class="string">'日'</span>, <span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span>][t.getDay()]</div><div class="line">   &#125;;</div><div class="line">   <span class="keyword">return</span> str.replace(<span class="regexp">/([a-z]+)/ig</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">1</span></span>)</span>&#123;<span class="keyword">return</span> obj[$<span class="number">1</span>]&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-斐波那契数列"><a href="#3-斐波那契数列" class="headerlink" title="3. 斐波那契数列"></a>3. 斐波那契数列</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> fibonacci(n<span class="number">-1</span>)+fibonacci(n<span class="number">-2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知识点：伪数组、浏览器本地存储、线程与进程、减少页面加载时间的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>腾讯课堂IMWeb前端求职训练营-Day02</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/20/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82IMWeb%E5%89%8D%E7%AB%AF%E6%B1%82%E8%81%8C%E8%AE%AD%E7%BB%83%E8%90%A5-Day02/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/20/腾讯课堂IMWeb前端求职训练营-Day02/</id>
    <published>2017-07-20T13:31:38.983Z</published>
    <updated>2017-07-20T13:38:33.990Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>知识点：一个完整的<code>HTTP</code>事务、<code>Web</code>攻击技术、<code>Ajax</code>、优雅降级和渐进增强。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、经典面试题"><a href="#一、经典面试题" class="headerlink" title="一、经典面试题"></a>一、经典面试题</h1><h2 id="5-一次完整的HTTP事务是怎样的一个过程？"><a href="#5-一次完整的HTTP事务是怎样的一个过程？" class="headerlink" title="5. 一次完整的HTTP事务是怎样的一个过程？"></a>5. 一次完整的HTTP事务是怎样的一个过程？</h2><p>基本流程：</p>
<p>a. 域名解析</p>
<p>b. 发起<code>TCP</code>的<code>3</code>次握手</p>
<p>c. 建立<code>TCP</code>连接后发起<code>http</code>请求</p>
<p>d. 服务器端响应<code>http</code>请求，浏览器得到<code>html</code>代码</p>
<p>e. 浏览器解析<code>html</code>代码，并请求<code>html</code>代码中的资源</p>
<p>f. 浏览器对页面进行渲染呈现给用户</p>
<h2 id="6-你所了解到的Web攻击技术"><a href="#6-你所了解到的Web攻击技术" class="headerlink" title="6. 你所了解到的Web攻击技术?"></a>6. 你所了解到的Web攻击技术?</h2><p>1）<code>XSS</code>（Cross-Site Scripting，跨站脚本攻击）：指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或者JavaScript进行的一种攻击。</p>
<p>2）<code>SQL</code>注入攻击。</p>
<p>3）<code>CSRF</code>（Cross-Site Request Forgeries，跨站点请求伪造）：指攻击者通过设置好的陷阱，强制对已完成的认证用户进行非预期的个人信息或设定信息等某些状态更新。</p>
<h2 id="7-Ajax是什么-Ajax的交互模型-同步和异步的区别-如何解决跨域问题"><a href="#7-Ajax是什么-Ajax的交互模型-同步和异步的区别-如何解决跨域问题" class="headerlink" title="7. Ajax是什么? Ajax的交互模型? 同步和异步的区别? 如何解决跨域问题?"></a>7. Ajax是什么? Ajax的交互模型? 同步和异步的区别? 如何解决跨域问题?</h2><p><strong>1）Ajax是什么</strong></p>
<p><code>ajax</code>是异步的 <code>JavaScript</code> 和 <code>XML</code>。通过在后台与服务器进行少量数据交换，<code>AJAX</code> 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
<p><strong>2）Ajax的交互模型</strong></p>
<ul>
<li>1–启动  获取<code>XMlHttpRequest</code>对象</li>
<li>2–<code>open</code> 打开<code>url</code>通道，并设置异步传输 </li>
<li>3–<code>send</code> 发送数据到服务器</li>
<li>4–服务器接受数据并处理，处理完成后返回结果 </li>
<li>5–客户端接收服务器端返回</li>
</ul>
<p><strong>3）同步和异步的区别</strong></p>
<p>同步：脚本会停留并等待服务器发送回复然后再继续</p>
<p>异步：脚本允许页面继续其进程并处理可能的回复</p>
<p><strong>4）Ajax跨域的解决方法</strong></p>
<p>如果在A网站中，我们希望使用<code>Ajax</code>来获得B网站中的特定内容，如果A网站与B网站不在同一个域中，那么就出现了跨域访问问题。</p>
<p><code>IE</code>对于跨域访问的处理是，弹出警告框，提醒用户。如果用户将该网站纳入可信任网站，或者调低安全级别，那么这个问题IE就不会在提醒你。</p>
<p><code>FireFox</code>等其它非微软的浏览器遇到跨域访问，则解决方案统一是拒绝访问。几个可行的方案：</p>
<ul>
<li><code>Web</code>代理的方式。</li>
<li><code>on-Demand</code>方式</li>
<li><code>iframe</code>方式。</li>
<li>用户本地转储方式</li>
</ul>
<h2 id="8-什么叫优雅降级和渐进增强？"><a href="#8-什么叫优雅降级和渐进增强？" class="headerlink" title="8.什么叫优雅降级和渐进增强？"></a>8.什么叫优雅降级和渐进增强？</h2><p><strong>“都关注于同一网站在不同设备里不同浏览器下的表现程度。”</strong></p>
<p>渐进增强 ( progressive enhancement )： 针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>
<p>优雅降级( graceful degradation )： 一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>
<p><strong>区别：</strong> </p>
<p>a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给 ；</p>
<p>b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要 ；</p>
<p>c. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带；</p>
<h1 id="二、编程题"><a href="#二、编程题" class="headerlink" title="二、编程题"></a>二、编程题</h1><h2 id="4-末尾添加元素"><a href="#4-末尾添加元素" class="headerlink" title="4. 末尾添加元素"></a>4. 末尾添加元素</h2><p><strong>题目</strong>：在数组 <code>arr</code> 末尾添加元素 <code>item</code>。不要直接修改数组 <code>arr</code>，结果返回新的数组。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 常规方法 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span></span>(arr, item) &#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">new</span><span class="type">Arr</span>.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">new</span><span class="type">Arr</span>.push(item);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* slice 方法*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span></span>(arr, item) &#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = arr.slice(<span class="number">0</span>);    <span class="comment">// slice(start, end（可选）); 返回部分数组，不修改原数组。</span></div><div class="line">    <span class="keyword">new</span><span class="type">Arr</span>.push(item);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* concat 方法*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span></span>(arr, item) &#123;</div><div class="line">    <span class="keyword">return</span> arr.concat(item);     <span class="comment">// 数组合并，不改变原数组。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="5-删除数组的第一个元素"><a href="#5-删除数组的第一个元素" class="headerlink" title="5. 删除数组的第一个元素"></a>5. 删除数组的第一个元素</h2><p><strong>题目</strong>：删除数组 <code>arr</code> 第一个元素。不要直接修改数组 <code>arr</code>，结果返回新的数组。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curtail</span></span>(arr) &#123;</div><div class="line">	<span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = arr.slice(<span class="number">0</span>);</div><div class="line">    <span class="keyword">new</span><span class="type">Arr</span>.shift();         <span class="comment">// unshift：头部添加；shift：头部删除。</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="6-根据idx和item添加元素"><a href="#6-根据idx和item添加元素" class="headerlink" title="6. 根据idx和item添加元素"></a>6. 根据idx和item添加元素</h2><p><strong>题目</strong>：在数组 <code>arr</code> 的 <code>index</code> 处添加元素 <code>item</code>。不要直接修改数组 <code>arr</code>，结果返回新的数组。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"> * splice(idx, num, item)；idx：要删除的起始位置；num（可选）：要删除的个数；</div><div class="line"> * item（可选）：要添加的项；返回被删除的元素；修改原数组。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span></span>(arr, item, index) &#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = arr.slice(<span class="number">0</span>);</div><div class="line">    <span class="keyword">new</span><span class="type">Arr</span>.splice(index, <span class="number">0</span>, item);    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知识点：一个完整的&lt;code&gt;HTTP&lt;/code&gt;事务、&lt;code&gt;Web&lt;/code&gt;攻击技术、&lt;code&gt;Ajax&lt;/code&gt;、优雅降级和渐进增强。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ES5中新增的Array方法——forEach()</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/19/ES5%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84Array%E6%96%B9%E6%B3%95/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/19/ES5中新增的Array方法/</id>
    <published>2017-07-19T14:36:17.739Z</published>
    <updated>2017-07-19T14:47:02.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>forEach</code>是<code>Array</code>新方法中最基本的一个，用于遍历，循环。</p>
</blockquote>
<a id="more"></a>
<h2 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h2><h3 id="1-语法："><a href="#1-语法：" class="headerlink" title="1. 语法："></a>1. 语法：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array.forEach(callback[, thisObject])</div></pre></td></tr></table></figure>
<h3 id="2-参数："><a href="#2-参数：" class="headerlink" title="2. 参数："></a>2. 参数：</h3><p><code>callback</code>：</p>
<p>用来测试每个元素的回调函数。callback被调用时传入三个参数：元素值，元素的索引，原数组。</p>
<p><code>thisObject</code>：</p>
<p>执行 callback 时使用的 this 值，为<strong>可选</strong>参数。如果省略该参数，则 callback  被调用时的 this 值，在非严格模式下为全局对象（浏览器中为window），在严格模式下传入 undefined。</p>
<h3 id="3-实例："><a href="#3-实例：" class="headerlink" title="3. 实例："></a>3. 实例：</h3><p><strong>举例1：数组求和</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 只关心数组元素的值，可以编写只有一个参数的函数，额外的参数将忽略</span></div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].forEach(value) &#123;</div><div class="line">    sum += value;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(sum);  <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p><strong>举例2：每个数组元素的值自加1</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 关注数组元素的值，索引以及数组本身</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, idx, arr</span>) </span>&#123;</div><div class="line">    arr[idx] = item + <span class="number">1</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [2,3,4,5]</span></div></pre></td></tr></table></figure>
<p><strong>举例3：指定this的值</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> database = &#123;</div><div class="line">    <span class="attr">users</span>: [<span class="string">"张含韵"</span>, <span class="string">"江一燕"</span>, <span class="string">"李小璐"</span>],</div><div class="line">    <span class="attr">sendEmail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isValidUser(user)) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"你好，"</span> + user);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"抱歉，"</span>+ user +<span class="string">"，你不是本家人"</span>);	</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isValidUser</span>: <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="regexp">/^张/</span>.test(user);   <span class="comment">// 正则匹配张姓</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 给每个人发邮件</span></div><div class="line">database.users.forEach(database.sendEmail, database);  <span class="comment">// 使用database代替this</span></div><div class="line"></div><div class="line"><span class="comment">// 结果：</span></div><div class="line"><span class="comment">// 你好，张含韵</span></div><div class="line"><span class="comment">// 抱歉，江一燕，你不是本家人</span></div><div class="line"><span class="comment">// 抱歉，李小璐，你不是本家</span></div></pre></td></tr></table></figure>
<p><strong>举例4：forEach不会遍历“空元素”</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,,,<span class="number">3</span>];         <span class="comment">// 未赋值元素的值为undefined</span></div><div class="line"><span class="built_in">console</span>.log(arr.length);   <span class="comment">// 数组长度仍为4</span></div><div class="line">arr.forEach(<span class="built_in">console</span>.log);  <span class="comment">// 遍历结果只打印1和3</span></div></pre></td></tr></table></figure>
<h3 id="5-IE6-8兼容扩展"><a href="#5-IE6-8兼容扩展" class="headerlink" title="5. IE6-8兼容扩展"></a>5. IE6-8兼容扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach != <span class="string">"function"</span>) &#123;</div><div class="line">    <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span> (<span class="params">fn, context</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">        	<span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">"function"</span> &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">        		fn.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);  <span class="comment">// fn.apply(context, [this[i], i, this]);</span></div><div class="line">        	&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-终止循环"><a href="#6-终止循环" class="headerlink" title="6. 终止循环"></a>6. 终止循环</h3><p><code>forEach()</code>无法在所有元素都传递给调用的函数之前终止遍历，也就是说，没有像<code>for</code>循环中使用的相应的<code>break</code>语句。如果要提前终止，必须把<code>forEach()</code>方法放在一个<code>try</code>块中，并能抛出一个异常。如果<code>forEach()</code>调用的函数抛出<code>foreach.break</code>异常，循环会提前终止。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foreach</span>(<span class="params">a,f,t</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;a.forEach(f,t);&#125;</div><div class="line">    <span class="keyword">catch</span>(e) &#123;</div><div class="line">        <span class="keyword">if</span>(e === foreach.break) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">foreach.break = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"StopIteration"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt;是&lt;code&gt;Array&lt;/code&gt;新方法中最基本的一个，用于遍历，循环。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://wenhuiyang-luck.github.io/categories/JavaScript/"/>
    
    
      <category term="Array" scheme="https://wenhuiyang-luck.github.io/tags/Array/"/>
    
      <category term="ES5" scheme="https://wenhuiyang-luck.github.io/tags/ES5/"/>
    
  </entry>
  
  <entry>
    <title>腾讯课堂IMWeb前端求职训练营-Day01</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/19/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82IMWeb%E5%89%8D%E7%AB%AF%E6%B1%82%E8%81%8C%E8%AE%AD%E7%BB%83%E8%90%A5-Day01/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/19/腾讯课堂IMWeb前端求职训练营-Day01/</id>
    <published>2017-07-19T09:31:12.389Z</published>
    <updated>2017-07-19T09:53:36.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>知识点：盒子模型、src和href的区别、同步和异步、Dom节点操作。</p>
</blockquote>
<a id="more"></a>
<h1 id="一、经典面试题"><a href="#一、经典面试题" class="headerlink" title="一、经典面试题"></a>一、经典面试题</h1><h2 id="1-什么是盒子模型？"><a href="#1-什么是盒子模型？" class="headerlink" title="1. 什么是盒子模型？"></a>1. 什么是盒子模型？</h2><ul>
<li><strong>盒模型</strong>： 内容(content)、填充(padding)、边界(margin)、 边框(border)</li>
<li><strong>两种</strong>: 标准 W3C 盒子模型、IE 盒子模型</li>
<li><strong>区别</strong>：IE的content部分包含了 border 和 padding</li>
</ul>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/FlbflSTD-RokStTYxHw1KlIzosBx" alt="img"></p>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/FrYThnUmgmNJscbN6S9UQH8qMSQH" alt="img"></p>
<h2 id="2-简述一下src与href的区别"><a href="#2-简述一下src与href的区别" class="headerlink" title="2. 简述一下src与href的区别?"></a>2. 简述一下src与href的区别?</h2><p><strong>href</strong>指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。</p>
<p><strong>src</strong>是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</p>
<h2 id="3-简述同步和异步的区别"><a href="#3-简述同步和异步的区别" class="headerlink" title="3. 简述同步和异步的区别?"></a>3. 简述同步和异步的区别?</h2><p>同步是阻塞模式，异步是非阻塞模式。</p>
<p>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；</p>
<p>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。</p>
<p>举个例子：普通B/S模式（同步）AJAX技术（异步）  </p>
<p>同步：提交请求 -&gt; 等待服务器处理（这个期间客户端浏览器不能干任何事）-&gt; 处理完毕返回</p>
<p>异步：请求通过事件触发 -&gt; 服务器处理（这是浏览器仍然可以作其他事情）-&gt; 处理完</p>
<h2 id="4-怎样添加、移除、移动、复制、创建和查找节点？"><a href="#4-怎样添加、移除、移动、复制、创建和查找节点？" class="headerlink" title="4. 怎样添加、移除、移动、复制、创建和查找节点？"></a>4. 怎样添加、移除、移动、复制、创建和查找节点？</h2><p>1）创建新节点</p>
<pre><code>createDocumentFragment() //创建一个DOM片段
createElement() //创建一个具体的元素
createTextNode() //创建一个文本节点
</code></pre><p>2）添加、移除、替换、插入</p>
<pre><code>appendChild() //添加
removeChild() //移除
replaceChild() //替换
insertBefore() //插入
</code></pre><p>3）查找</p>
<pre><code>getElementsByTagName() //通过标签名称
getElementsByName() //通过元素的Name属性的值
getElementById() //通过元素Id，唯一性
</code></pre><h1 id="二、编程题"><a href="#二、编程题" class="headerlink" title="二、编程题"></a>二、编程题</h1><h2 id="1-查找数组元素位置"><a href="#1-查找数组元素位置" class="headerlink" title="1. 查找数组元素位置"></a>1. 查找数组元素位置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">indexOf</span>(<span class="params">arr, item</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">Array</span>.prototype.indexOf)&#123;</div><div class="line">        <span class="keyword">return</span> arr.indexOf(item);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(arr[i] === item)&#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">     &#125;     </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-求和"><a href="#2-求和" class="headerlink" title="2. 求和"></a>2. 求和</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 递归</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> len = arr.length;</div><div class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>] + sum(arr.slice(<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 常规循环</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">        s += arr[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 函数式编程 map-reduce</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span><span class="params">(prev, curr, idx, arr)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> prev + curr;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// forEach遍历</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</div><div class="line">    arr.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(val, idx, arr)</span> </span>&#123;</div><div class="line">        s += val;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// eval</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">eval</span>(arr.join(<span class="string">"+"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-移除数组中与item相等的元素"><a href="#3-移除数组中与item相等的元素" class="headerlink" title="3. 移除数组中与item相等的元素"></a>3. 移除数组中与item相等的元素</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 常规循环</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span></span>(arr,item)&#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] != item)&#123;</div><div class="line">            <span class="keyword">new</span><span class="type">Arr</span>.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// filter</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span></span>(arr,item)&#123;</div><div class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span></span>(s)&#123;</div><div class="line">        <span class="keyword">if</span>(s != item)&#123;</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        &#125;</div><div class="line">    &#125;)；</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;知识点：盒子模型、src和href的区别、同步和异步、Dom节点操作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://wenhuiyang-luck.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>iframe 标签嵌套页面</title>
    <link href="https://wenhuiyang-luck.github.io/2017/05/18/iframe%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/"/>
    <id>https://wenhuiyang-luck.github.io/2017/05/18/iframe嵌套页面/</id>
    <published>2017-05-18T02:04:48.879Z</published>
    <updated>2017-05-18T12:31:16.962Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们常常会希望将某种小效果可以直接在文档中显示，而不是通过一个预览外链来查看效果，<code>iframe</code> 元素就可以实现，它会创建包含另外一个文档的内联框架（即行内框架），<code>iframe</code>相当于浏览器里面有个小浏览器，在这个小浏览器中，打开另一个网页。可根据自己的需求自行设置<code>frameborder</code>及<code>scrolling</code>等属性。</p>
</blockquote>
<a id="more"></a>
<h4 id="1-属性"><a href="#1-属性" class="headerlink" title="1. 属性"></a>1. 属性</h4><p>有标记的是h5新属性</p>
<p><img src="../../../../images/24-1.png" alt=""></p>
<h4 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h4><p>本博客使用<code>markdown</code>编写，只需要在内容中嵌入<code>iframe</code>标签即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://wenhuiyang-luck.github.io/jquery-plugin/手风琴/index.html"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"400px"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一些老的浏览器不支持 iframe。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果得不到支持，iframe 是不可见的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>效果如下：</strong><br>点击试试手风琴效果吧</p>
<iframe src="https://wenhuiyang-luck.github.io/jquery-plugin/%E6%89%8B%E9%A3%8E%E7%90%B4/index.html" width="100%" height="400px" frameborder="0" scrolling="no"></iframe>

]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们常常会希望将某种小效果可以直接在文档中显示，而不是通过一个预览外链来查看效果，&lt;code&gt;iframe&lt;/code&gt; 元素就可以实现，它会创建包含另外一个文档的内联框架（即行内框架），&lt;code&gt;iframe&lt;/code&gt;相当于浏览器里面有个小浏览器，在这个小浏览器中，打开另一个网页。可根据自己的需求自行设置&lt;code&gt;frameborder&lt;/code&gt;及&lt;code&gt;scrolling&lt;/code&gt;等属性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTML/HTML5笔记" scheme="https://wenhuiyang-luck.github.io/categories/HTML-HTML5%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="https://wenhuiyang-luck.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>天猫仿站：4产品页面——基本详情</title>
    <link href="https://wenhuiyang-luck.github.io/2017/05/16/%E5%A4%A9%E7%8C%AB%E4%BB%BF%E7%AB%99%EF%BC%9A4%E4%BA%A7%E5%93%81%E9%A1%B5%E9%9D%A2%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E8%AF%A6%E6%83%85/"/>
    <id>https://wenhuiyang-luck.github.io/2017/05/16/天猫仿站：4产品页面——基本详情/</id>
    <published>2017-05-16T13:51:37.769Z</published>
    <updated>2017-05-16T14:48:38.260Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>产品页面之基本详情页中用到的“左边固定，右边自动占满”布局。相应的写一“左右固定，中间自适应”布局。</p>
</blockquote>
<a id="more"></a>
<p><img src="../../../../images/23-1.png" alt=""></p>
<p><a href="https://wenhuiyang-luck.github.io/Worklists/%E4%BB%BF%E7%AB%99/4-%E4%BA%A7%E5%93%81%E9%A1%B5%E9%9D%A2/4-%E4%BA%A7%E5%93%81%E9%A1%B5%E9%9D%A2_%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF.html">预览地址</a></p>
<h4 id="1-左边固定，右边自动占满"><a href="#1-左边固定，右边自动占满" class="headerlink" title="1. 左边固定，右边自动占满"></a>1. 左边固定，右边自动占满</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">   <span class="attribute">float</span>:left;</div><div class="line">   <span class="attribute">background-color</span>:pink</div><div class="line">  &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">    <span class="attribute">background-color</span>:lightskyblue;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边自动填满<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/hegi/12/edit" target="_blank" rel="external">效果预览</a></p>
<h4 id="2-左右固定，中间自适应的布局（浮动）"><a href="#2-左右固定，中间自适应的布局（浮动）" class="headerlink" title="2. 左右固定，中间自适应的布局（浮动）"></a>2. 左右固定，中间自适应的布局（浮动）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">   <span class="attribute">float</span>:left;</div><div class="line">   <span class="attribute">background-color</span>:pink</div><div class="line">  &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">   <span class="attribute">float</span>:right;</div><div class="line">   <span class="attribute">background-color</span>:pink</div><div class="line">  &#125;</div><div class="line"><span class="selector-class">.center</span> &#123;</div><div class="line">   <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">200px</span>;   </div><div class="line">   <span class="attribute">background-color</span>:lightblue</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/hegi/7/edit" target="_blank" rel="external">效果预览</a></p>
<p>这里需要注意三个<code>div</code>的顺序：<code>左-右-中</code>，中间的<code>div</code>最后写，如果写在中间，会发生什么呢？</p>
<p><a href="http://js.jirengu.com/hegi/14/edit" target="_blank" rel="external">我来瞧瞧发生了什么</a></p>
<p>可以看见最后一个<code>div</code>掉下去了，这是因为中间的div没有设置浮动，放在中间div后面的div会换行。下面介绍用<code>position</code>定位实现这种布局。</p>
<h4 id="3-左右固定，中间自适应的布局（定位）"><a href="#3-左右固定，中间自适应的布局（定位）" class="headerlink" title="3. 左右固定，中间自适应的布局（定位）"></a>3. 左右固定，中间自适应的布局（定位）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">* &#123;</div><div class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">   <span class="attribute">position</span>: absolute;</div><div class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">   <span class="attribute">background-color</span>: pink;</div><div class="line"> &#125;</div><div class="line"><span class="selector-class">.center</span>&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: lightblue;</div><div class="line"> &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: pink;</div><div class="line"> &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/hegi/16/edit" target="_blank" rel="external">效果预览</a></p>
<p>这种布局就和div的顺序无关了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;产品页面之基本详情页中用到的“左边固定，右边自动占满”布局。相应的写一“左右固定，中间自适应”布局。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/categories/%E4%BB%BF%E7%AB%99/"/>
    
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/tags/%E4%BB%BF%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>天猫仿站：3分类页面——排序和价格</title>
    <link href="https://wenhuiyang-luck.github.io/2017/05/14/%E5%A4%A9%E7%8C%AB%E4%BB%BF%E7%AB%99%EF%BC%9A3%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BB%B7%E6%A0%BC/"/>
    <id>https://wenhuiyang-luck.github.io/2017/05/14/天猫仿站：3分类页面——排序和价格/</id>
    <published>2017-05-14T14:04:56.516Z</published>
    <updated>2017-05-16T13:51:31.821Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>分类页面之排序和价格页面的布局。</p>
</blockquote>
<a id="more"></a>
<p><img src="../../../../images/22-1.png" alt=""></p>
<p><a href="https://wenhuiyang-luck.github.io/Worklists/%E4%BB%BF%E7%AB%99/3-%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2/3-%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2_%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BB%B7%E6%A0%BC.html">预览地址</a></p>
<h4 id="1-HTML结构"><a href="#1-HTML结构" class="headerlink" title="1. HTML结构"></a>1. HTML结构</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"categorySortBarTable categorySortTable"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"grayColumn"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>综合<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>人气<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新品<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>销量<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>价格<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-resize-vertical"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"categorySortBarTable"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span> <span class="attr">class</span>=<span class="string">"sortBarPrice beginPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"grayColumn priceMiddleColumn"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span> <span class="attr">class</span>=<span class="string">"sortBarPrice endPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-表格布局"><a href="#2-表格布局" class="headerlink" title="2. 表格布局"></a>2. 表格布局</h4><p>要实现上述效果中显示的，使排序项排列在一行，有多种方式，如float，inline，inline-block。<br>此处，我们要实现的效果不仅是排列在一行，此外每个排序项还需要边框，倘若不使用表格来做，而是使用span的border样式来做边框，那么相邻的两个span的边框会挨再一起，就是二倍宽度，看上去过粗。 为了解决过粗的问题，需要对每个span进行仅仅设置左边框，或者右边框，显而易见，此时增加了设置样式的复杂度。而使用table，只需要为td设置border边框，就可以达到效果。 容易很多，维护起来也更简单。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span><span class="selector-class">.categorySortBarTable</span> &#123;</div><div class="line">   <span class="attribute">border-collapse</span>: collapse;  <span class="comment">/*单元格之间没有空隙*/</span></div><div class="line">   <span class="attribute">display</span>: inline-block;      <span class="comment">/*显示为内联，既可以设置大小，又能够不换行*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">table</span><span class="selector-class">.categorySortBarTable</span> <span class="selector-tag">td</span> &#123;</div><div class="line">   <span class="attribute">height</span>: <span class="number">17px</span>;</div><div class="line">   <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">   <span class="attribute">padding</span>: <span class="number">3px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于border-collapse属性：<br>border-collapse: separate(默认,边框分隔) | collapse(边框合并)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">table</span><span class="selector-class">.t1</span>&#123;</div><div class="line">   <span class="attribute">border-collapse</span>:separate;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">table</span><span class="selector-class">.t2</span>&#123;</div><div class="line">   <span class="attribute">border-collapse</span>:collapse;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"t1"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框分离<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框分离<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"t2"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/geyas/2/edit" target="_blank" rel="external">预览</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分类页面之排序和价格页面的布局。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/categories/%E4%BB%BF%E7%AB%99/"/>
    
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/tags/%E4%BB%BF%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript算法题（1）—— Return Largest Numbers in Arrays</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/25/JavaScript%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94Return%20Largest%20Numbers%20in%20Arrays/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/25/JavaScript算法题（1）——Return Largest Numbers in Arrays/</id>
    <published>2017-04-25T02:03:57.160Z</published>
    <updated>2017-05-01T05:16:21.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.</p>
</blockquote>
<a id="more"></a>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">largestOfFour([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]);</div></pre></td></tr></table></figure>
<h2 id="1-Basic-Code-Solution"><a href="#1-Basic-Code-Solution" class="headerlink" title="1. Basic Code Solution"></a>1. Basic Code Solution</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> results = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">    <span class="keyword">var</span> largestNumber = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++)&#123;</div><div class="line">      <span class="keyword">if</span>(arr[i][j] &gt; largestNumber) &#123;</div><div class="line">        largestNumber = arr[i][j];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    results[i] = largestNumber;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>算法说明：</p>
<ul>
<li>创建results变量存储返回的结果数组；</li>
<li>创建一个外部循还遍历外层数组；<ul>
<li>创建内层循还遍历每一个内层数组，寻找最大值，存储在变量largestNumber中；</li>
<li>将每一个内层数组中的最大值保存在results中的相应位置；</li>
</ul>
</li>
<li>返回结果数组。</li>
</ul>
<h2 id="2-Intermediate-Code-Solution"><a href="#2-Intermediate-Code-Solution" class="headerlink" title="2. Intermediate Code Solution"></a>2. Intermediate Code Solution</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span><span class="params">(group)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> group.reduce(<span class="function"><span class="keyword">function</span><span class="params">(prev, current)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> (current &gt; prev) ? current:prev;</div><div class="line">    &#125;,<span class="number">0</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map?v=example" target="_blank" rel="external">Array.prototype.map()</a></li>
</ul>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=example" target="_blank" rel="external">Array.prototype.reduce()</a></li>
</ul>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank" rel="external">Ternary Operators(三元运算)</a></li>
</ul>
<h2 id="3-Advanced-Code-Solution"><a href="#3-Advanced-Code-Solution" class="headerlink" title="3. Advanced Code Solution"></a>3. Advanced Code Solution</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> largestOfFour(arr) &#123;</div><div class="line">  <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">Function</span>.<span class="title">apply</span></span>.<span class="keyword">bind</span>(Math.<span class="built_in">max</span>, null));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">Function.prototype.apply()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">Function.prototype.bind()</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="JavaScript" scheme="https://wenhuiyang-luck.github.io/tags/JavaScript/"/>
    
      <category term="Arrays" scheme="https://wenhuiyang-luck.github.io/tags/Arrays/"/>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>CSS sprites原理</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/24/CSS%20sprites%E5%8E%9F%E7%90%86/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/24/CSS sprites原理/</id>
    <published>2017-04-24T09:30:03.115Z</published>
    <updated>2017-05-01T05:13:34.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>解释CSS sprites原理及优缺点。</p>
</blockquote>
<a id="more"></a>
<p><code>CSS sprites</code>其实就是把网页中一些背景图片整合到一张图片中，再利用<code>CSS</code>的<code>background-image</code>，<code>background-repeat</code>，<code>background-position</code>的组合进行背景定位，<code>background-position</code>可以用数字精确的定位出背景图片的位置。</p>
<p><strong>优点：</strong></p>
<ol>
<li>减少网页的<code>http</code>请求。</li>
<li>减少图片的字节。</li>
<li>解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。</li>
<li>更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>在宽屏，高分辨率的屏幕下的自适应页面，图片如果不够宽，很容易出现背景断裂。</li>
<li><code>CSS sprites</code>在开发的时候，要通过<code>photoshop</code>或其他工具测量计算每一个背景单元的精确位置。</li>
<li>在维护的时候比较麻烦，如果页面背景有少许改动，一般就要改这张合并的图片。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解释CSS sprites原理及优缺点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>如何解决 “Another git process seems to be running in this repository”</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/23/How%20to%20fix%20error%20%E2%80%9CAnother%20git%20process%20seems%20to%20be%20running%20in%20this%20repository%E2%80%9D/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/23/How to fix error “Another git process seems to be running in this repository”/</id>
    <published>2017-04-23T03:57:22.281Z</published>
    <updated>2017-05-01T05:15:55.600Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>解决 git 推送中 “Another git process seems to be running in this repository” 问题。</p>
</blockquote>
<a id="more"></a>
<p><strong>错误：</strong></p>
<p><code>git bash</code>使用命令行<code>git commit</code>提交修改时，还未提交成功，就点了关闭按钮。再次提交时，出现了如下错误。</p>
<p><img src="../../../../images/19-1.png" alt=""></p>
<p>意思是说，当前已有一个编辑器打开了<code>“git commit”</code>指令，请关闭所有<code>git</code>相关的进程重试，否则，请手动删除那个文件。</p>
<p><strong>解决办法：</strong></p>
<p>根据我们所了解到的，<code>windows</code>对于进程的同步互斥管理，是有资源上锁机制的。猜测这里肯定是有进程对某资源进行了加锁，但是由于进程突然崩溃，未来得及解锁，导致其他进程访问不了。进入工作区目录下的隐藏文件夹<code>.git</code>中，可以看到有<code>index.lock</code>文件，只需要删除此文件，就可解决问题。</p>
<p>使用如下命令删除<code>index.lock</code>文件：</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm .git/<span class="keyword">index</span>.lock</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解决 git 推送中 “Another git process seems to be running in this repository” 问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="错误整理" scheme="https://wenhuiyang-luck.github.io/categories/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Github" scheme="https://wenhuiyang-luck.github.io/tags/Github/"/>
    
      <category term="Git" scheme="https://wenhuiyang-luck.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CSS浮动</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/20/CSS%E6%B5%AE%E5%8A%A8/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/20/CSS浮动/</id>
    <published>2017-04-20T07:06:35.214Z</published>
    <updated>2017-05-01T05:13:57.553Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>介绍CSS浮动，浮动对父级元素和布局的影响，以及清除浮动的方法。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-CSS浮动"><a href="#1-CSS浮动" class="headerlink" title="1. CSS浮动"></a>1. CSS浮动</h2><p>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</p>
<p>当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘：</p>
<p><img src="http://www.w3school.com.cn/i/ct_css_positioning_floating_right_example.gif" alt=""></p>
<p>当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。</p>
<p>如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。</p>
<p><img src="http://www.w3school.com.cn/i/ct_css_positioning_floating_left_example.gif" alt=""></p>
<p>如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”：</p>
<p><img src="http://www.w3school.com.cn/i/ct_css_positioning_floating_left_example_2.gif" alt=""></p>
<h2 id="2-浮动的影响"><a href="#2-浮动的影响" class="headerlink" title="2. 浮动的影响"></a>2. 浮动的影响</h2><h3 id="2-1-浮动对父级元素的影响"><a href="#2-1-浮动对父级元素的影响" class="headerlink" title="2.1 浮动对父级元素的影响"></a>2.1 浮动对父级元素的影响</h3><p>父级元素出现高度坍塌的问题。</p>
<p>解析：当没有为父元素设置高度时，父级元素的高度是由子元素的高度撑开的，当子元素浮动之后，就会脱离文档流，相当于是不存在于父级元素中，那么父级元素的高度就会塌陷为“0”。</p>
<h3 id="2-2-浮动对布局的影响"><a href="#2-2-浮动对布局的影响" class="headerlink" title="2.2 浮动对布局的影响"></a>2.2 浮动对布局的影响</h3><p>1.浮动能实现多个块元素处于同一行；<br>2.子级浮动会使父级出现高度塌陷问题；<br>3.浮动元素会对后面的兄弟级元素造成影响。</p>
<h2 id="3-清除浮动"><a href="#3-清除浮动" class="headerlink" title="3. 清除浮动"></a>3. 清除浮动</h2><p>正是因为浮动的这种特性，导致本属于普通流中的元素浮动之后，包含框中由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）。在实际布局中，往往这并不是我们所希望的，所以需要清除浮动，使其包含框表现出正常的高度。</p>
<h3 id="3-1-使用空标签清浮动"><a href="#3-1-使用空标签清浮动" class="headerlink" title="3.1 使用空标签清浮动"></a>3.1 使用空标签清浮动</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"clear:both;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<p>优点：通俗易懂，容易掌握<br>缺点：增加无意义的空标签，后期维护不方便，不推荐使用。</p>
<h3 id="3-2-使用br标签清浮动"><a href="#3-2-使用br标签清浮动" class="headerlink" title="3.2 使用br标签清浮动"></a>3.2 使用br标签清浮动</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float:left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float:left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">br</span> <span class="attr">clear</span>=<span class="string">"all"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>优点：比空标签方式语义稍强，代码量较少。<br>缺点：同样有违结构与表现的分离，不推荐使用。</p>
<h3 id="3-3-父级div定义-overflow-hidden"><a href="#3-3-父级div定义-overflow-hidden" class="headerlink" title="3.3 父级div定义 overflow: hidden"></a>3.3 父级div定义 overflow: hidden</h3><p>通过设置父元素overflow值设置为hidden；在IE6中还需要触发 hasLayout ，例如 zoom：1；</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"overflow:hidden; *zoom:1;"</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<p>优点：不存在结构和语义化问题，代码量极少。<br>缺点：无法显示溢出部分，不推荐使用。</p>
<h3 id="3-4-让父级发生浮动"><a href="#3-4-让父级发生浮动" class="headerlink" title="3.4 让父级发生浮动"></a>3.4 让父级发生浮动</h3><p>优点：不存在结构和语义化问题，代码量极少。<br>缺点：使得与父元素相邻的元素的布局会受到影响，不可能一直浮动到body，不推荐使用。</p>
<h3 id="3-5-利用after伪元素清浮动"><a href="#3-5-利用after伪元素清浮动" class="headerlink" title="3.5 利用after伪元素清浮动"></a>3.5 利用after伪元素清浮动</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>＝<span class="string">"clearfix"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:right;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span> &#123;*zoom:<span class="number">1</span>;&#125;</div><div class="line"><span class="selector-class">.clearfix</span>:after &#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">'.'</span>;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="attribute">height</span>:<span class="number">0px</span>;</div><div class="line">    <span class="attribute">clear</span>:both;</div><div class="line">    <span class="attribute">visibility</span>: hidden; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.<code>content:&quot;.&quot;;</code>  生成内容作为最后一个元素<br>2.<code>display:block;</code>  使生成的元素以块级元素显示，占满剩余空间;<br>3.<code>height:0px;</code>  避免生成内容破坏原有布局的高度。<br>4.<code>visibility:hidden;</code>  使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;</p>
<p>优点：结构和语义化完全正确，代码量居中。<br>缺点：复用方式不当会造成代码量增加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍CSS浮动，浮动对父级元素和布局的影响，以及清除浮动的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>position定位属性</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/20/position%E5%AE%9A%E4%BD%8D%E5%B1%9E%E6%80%A7/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/20/position定位属性/</id>
    <published>2017-04-20T03:31:05.652Z</published>
    <updated>2017-05-01T05:14:15.431Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>介绍position定位属性，绝对/固定定位的定位原理以及绝对/相对定位的区别。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-position定位属性有哪些"><a href="#1-position定位属性有哪些" class="headerlink" title="1. position定位属性有哪些"></a>1. position定位属性有哪些</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">position: static | <span class="type">relative</span> | <span class="type">absolute</span> | <span class="type">fixed</span> | <span class="type">inherit</span></div></pre></td></tr></table></figure>
<ul>
<li>static：默认值，没有定位；</li>
<li>relative：生成相对定位元素，相对于其正常位置进行定位；</li>
<li>absolute：生成绝对定位元素，相对于static以外的第一个父元素进行定位；</li>
<li>fixed：生成固定定位的元素，相对于浏览器窗口进行定位；</li>
<li>inherit：规定从父元素继承position属性的值。</li>
</ul>
<h2 id="2-绝对-固定定位的定位原理"><a href="#2-绝对-固定定位的定位原理" class="headerlink" title="2. 绝对/固定定位的定位原理"></a>2. 绝对/固定定位的定位原理</h2><ul>
<li><p><strong>绝对定位</strong>：absolute 相对于设置了除static定位以外的第一个父元素进行定位；</p>
</li>
<li><p><strong>固定定位</strong>：fixed相对于浏览器窗口进行定位</p>
<p>解析：</p>
</li>
</ul>
<ol>
<li>如果父级（无限）没有设定position属性，那么当前的absolute则结合top，right，left，bottom属性以浏览器左上角为原始点进行定位。</li>
<li>如果父级（无限）设定position属性，且属性值为relative、absolute、fixed，那么当前的absolute则结合top，right，left，bottom属性以父级（最近）的左上角为原始点进行定位。</li>
</ol>
<h2 id="3-绝对-相对定位的区别"><a href="#3-绝对-相对定位的区别" class="headerlink" title="3. 绝对/相对定位的区别"></a>3. 绝对/相对定位的区别</h2><p>​    主要从二者是否脱离文档流、是否会重叠、定位的参照物方面进行比较：</p>
<ol>
<li>相对定位不会脱离文档流，绝对定位脱离文档流；</li>
<li>绝对定位的元素相互层叠，相对定位的元素不会；</li>
<li>绝对定位的元素相对于static以外的第一个父元素进行定位，相对定位相对于其正常位置进行定位。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍position定位属性，绝对/固定定位的定位原理以及绝对/相对定位的区别。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>a标签伪类的书写顺序及原因</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/19/a%E6%A0%87%E7%AD%BE%E4%BC%AA%E7%B1%BB%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F%E5%8F%8A%E5%8E%9F%E5%9B%A0/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/19/a标签伪类的书写顺序及原因/</id>
    <published>2017-04-19T14:10:52.322Z</published>
    <updated>2017-05-01T05:18:24.010Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>a 标签书写顺序：<code>:link</code>, <code>:visited</code>,  <code>:hover</code>,  <code>:active</code>;  简记：<code>lvha</code>。</p>
</blockquote>
<a id="more"></a>
<ol>
<li>链接未进行访问时，显示 link 样式，也就是链接的默认样式；</li>
<li>当访问过了该链接，显示 visited 样式，由于两种选择器的优先级相等，必须让 visited 样式覆盖 link 样式，因此要先写 link 样式；</li>
<li>当鼠标移动到链接上时，可能是未访问也可能是已经访问， hover 样式要能够覆盖另外两种样式，因此 hover 要放在 visited 的后面；</li>
<li>当鼠标按下时，鼠标处于 a 标签之上（ hover 效果也处于激活状态），为了能够区分悬停和按下，需要让 active 样式覆盖 hover 样式，即 active 的样式放置在最后。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;a 标签书写顺序：&lt;code&gt;:link&lt;/code&gt;, &lt;code&gt;:visited&lt;/code&gt;,  &lt;code&gt;:hover&lt;/code&gt;,  &lt;code&gt;:active&lt;/code&gt;;  简记：&lt;code&gt;lvha&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>七种隐藏元素的方法</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/19/%E4%B8%83%E7%A7%8D%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/19/七种隐藏元素的方法/</id>
    <published>2017-04-19T13:46:02.177Z</published>
    <updated>2017-05-01T05:14:21.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>列举七种隐藏元素的方法。</p>
</blockquote>
<a id="more"></a>
<ol>
<li><code>visiable:hidden;</code>这个属性只是简单的隐藏某个元素，但是元素占用文档空间。<ol>
<li><code>opacity:0;</code>CSS3属性，可以使一个元素完全透明，与<code>visiable:hidden</code>效果相同。与<code>visiable</code>相比，它可以设置transition和animate。</li>
</ol>
</li>
<li><code>position:absolute;</code>使元素脱离文档流，处于普通文档之上，给它设置一个很大的<code>left</code>负值定位，使元素定位在可见区域之外。</li>
<li><code>display:none;</code>元素变得不可见，与<code>visiable:hidden</code>不同的是不会占用文档空间。</li>
<li><code>transform:scale(0);</code>将一个元素设置为无限小，这个元素将不可见，但是元素占用的空间仍然保留。</li>
<li><code>height:0;overflow:hidden;</code>将元素的高度设置为0，只要元素没有可见的边框，就可以使元素消失。</li>
<li><code>filter:blur(0);</code>将元素的模糊度设为0，从而使这个元素“消失”在页面中。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;列举七种隐藏元素的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
