<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨小慧的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wenhuiyang-luck.github.io/"/>
  <updated>2017-08-21T12:21:23.485Z</updated>
  <id>https://wenhuiyang-luck.github.io/</id>
  
  <author>
    <name>杨小慧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文字超出长度显示省略号</title>
    <link href="https://wenhuiyang-luck.github.io/2017/08/21/%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E7%94%A8%E7%9C%81%E7%95%A5%E5%8F%B7%E8%A1%A8%E7%A4%BA/"/>
    <id>https://wenhuiyang-luck.github.io/2017/08/21/文字超出用省略号表示/</id>
    <published>2017-08-21T11:46:24.707Z</published>
    <updated>2017-08-21T12:21:23.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>为了保证页面的整洁美观，在很多的时候，我们常需要隐藏超出长度的文字。</p>
</blockquote>
<a id="more"></a>
<p>以下是超出定宽容器显示省略号的设置方法，原理都一样。</p>
<p>HTML代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"line-limit"</span>&gt;</span>亲，一行文字太多，显示不下，接下来的文字我要用省略号代替。我可能是超出长度被隐藏的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>CSS代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">   <span class="attribute">background-color</span>: <span class="number">#9cc9ef</span>;</div><div class="line">   <span class="attribute">max-width</span>: <span class="number">470px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.line-limit</span> &#123;           </div><div class="line">   <span class="attribute">overflow</span>: hidden;           <span class="comment">/*超出隐藏*/</span></div><div class="line">   <span class="attribute">text-overflow</span>: ellipsis;    <span class="comment">/*文本隐藏部分显示为省略*/</span></div><div class="line">   <span class="attribute">white-space</span>: nowrap;        <span class="comment">/*文本不换行，这样超出一行的部分被截取，显示...*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果截图：</p>
<p><img src="../../../../images/37-1.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为了保证页面的整洁美观，在很多的时候，我们常需要隐藏超出长度的文字。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中常见的几种排序算法</title>
    <link href="https://wenhuiyang-luck.github.io/2017/08/18/js%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://wenhuiyang-luck.github.io/2017/08/18/js常见排序算法/</id>
    <published>2017-08-18T09:07:35.423Z</published>
    <updated>2017-08-18T12:46:40.567Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文学习自《JavaScript数据结构与算法》，记录JavaScript 中常见的几种排序算法，包括冒泡排序，选择排序，插入排序，归并排序和快速排序。详细介绍算法思想，复杂度，算法代码以及示意图演示。</p>
</blockquote>
<a id="more"></a>
<h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h3><p>【算法思想】：比较任何两个相邻的项，如果第一个比第二个大，则交换它们。元素项向上移动至正确的顺序，就好像气泡升至表面一样。<br>【O复杂度】：O(n^2)，它在排序算法中最简单，但从运行时间的角度来看，冒泡排序是最差的。<br>【实现代码】：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> len = arr.length;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len<span class="number">-1</span>-i; j++) &#123;</div><div class="line">         <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</div><div class="line">            <span class="keyword">var</span> temp = arr[j];</div><div class="line">            arr[j] = arr[j+<span class="number">1</span>];</div><div class="line">            arr[j+<span class="number">1</span>] = temp;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> arr;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>【排序示意图】：[5, 4, 3, 2, 1]</p>
<p><img src="../../../../images/35-1.png" alt=""></p>
<h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h3><p>【算法思想】：原址比较排序算法，找到数据结构中的最小值并将其放置在第一位，接着找到第二小的值并将其放在第二位，以此类推。<br>【O复杂度】：O(n^2)，和冒泡排序一样，它包含嵌套的两个循环，这导致了二次方的复杂度。<br>【实现代码】：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> len = arr.length;</div><div class="line">   <span class="keyword">var</span> indexMin;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++) &#123;</div><div class="line">      indexMin = i;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt; len; j++) &#123;</div><div class="line">         <span class="keyword">if</span>(arr[indexMin] &gt; arr[j]) &#123;</div><div class="line">            indexMin = j;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (i != indexMin) &#123;</div><div class="line">         <span class="keyword">var</span> temp = arr[i];</div><div class="line">         arr[i] = arr[indexMin];</div><div class="line">         arr[indexMin] = temp;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>【排序示意图】：[5, 4, 3, 2, 1]</p>
<p><img src="../../../../images/35-2.png" alt=""></p>
<p>数组底部的箭头指示出当前迭代轮寻找最小值的数组范围，示意图中的每一步则表示外循环。</p>
<h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h3><p>【算法思想】：每次排一个数组项，以此方式构建最后的排序数组。假定第一项已经排序了，接着，它和第二项进行比较，第二项是应该待在原位还是插到第一项之前呢？这样，头两项就已正确排序，接着和第三项比较（它是该插入到第一、第二还是第三的位置呢？），以此类推。<br>【O复杂度】：排序小型数组时，此算法比选择排序和冒泡排序性能要好。。<br>【实现代码】：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> len = arr.length;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;  <span class="comment">// i从1开始，默认第一项已排好序</span></div><div class="line">      <span class="keyword">var</span> j = i;           </div><div class="line">      <span class="keyword">var</span> temp = arr[i];           <span class="comment">// 保存待插入项</span></div><div class="line">      <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j<span class="number">-1</span>] &gt; temp) &#123;</div><div class="line">         arr[j] = arr[j<span class="number">-1</span>];</div><div class="line">         j--;</div><div class="line">      &#125;</div><div class="line">      arr[j] = temp;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>【排序示意图】：[3, 5, 1, 4, 2]</p>
<p><img src="../../../../images/35-3.png" alt=""></p>
<p>(1) 3 已被排序，所以我们从数组第二个值5开始。3比5小，所以5待在原位（数组的第二位）。3和5排序完毕。<br>(2)  下一个待排序和插到正确位置上去的值是1（目前在数组的第三位）。5比1大，所以5被移至第三位去了。我们得分析1是否应该被插入到第二位——1比3大吗？不，所以3被移到第二位去了。接着，我们得证明1 应该插入到数组的第一位上。因为0是第一个位置且没有负数位，所以1必须被插入到第一位。1、3、5三个数字已经排序。<br>(3) 4应该在当前位置（索引3 ）还是要移动到索引较低的位置上呢？4 比5 小，所以5 移动到索引3 位置上去。那么应该把4 插到索引2 的位置上去吗？4 要比3 大，所以4 插入到数组的位置3 上。<br>(4)  下一个待插入的数字是2 （数组的位置4）。5比2大，所以5移动至索引4。4比2 大，所以4也得移动（位置3）。3也比2大，所以3还得移动。1比2小，所以2插入到数组的第二位置上。至此，数组已排序完成。</p>
<h3 id="4-归并排序"><a href="#4-归并排序" class="headerlink" title="4. 归并排序"></a>4. 归并排序</h3><p>【算法思想】：是一种分治算法。其思想是将原始数组切分成较小的数组，直到每个小数组只有一个位置，接着将小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。<br>【O复杂度】：O(nlog^n)，归并排序性能不错。<br>【实现代码】：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> mergeSortRec(arr);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSortRec</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> len = arr.length;</div><div class="line">   <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;<span class="keyword">return</span> arr;&#125;</div><div class="line"></div><div class="line">   <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),  <span class="comment">// 中值</span></div><div class="line">      left = arr.slice(<span class="number">0</span>, mid),   <span class="comment">// 左数组</span></div><div class="line">      right = arr.slice(mid, len);<span class="comment">// 右数组</span></div><div class="line">   <span class="keyword">return</span> merge(mergeSortRec(left), mergeSortRec(right));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> res = [],</div><div class="line">      lenLeft = left.length,</div><div class="line">      lenRight = right.length,</div><div class="line">      il = <span class="number">0</span>, ir = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span>(il &lt; lenLeft &amp;&amp; ir &lt; lenRight) &#123;</div><div class="line">      <span class="keyword">if</span>(left[il] &lt; right[ir]) &#123;</div><div class="line">         res.push(left[il++]);</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">         res.push(right[ir++]);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">while</span>(il &lt; lenLeft) &#123;</div><div class="line">      res.push(left[il]);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">while</span>(ir &lt; lenRight) &#123;</div><div class="line">      res.push(right[ir]);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>【排序示意图】：[8, 7, 6, 5, 4, 3, 2, 1]</p>
<p><img src="../../../../images/35-5.png" alt=""></p>
<p>可以看到，算法首先将原始数组分割直至只有一个元素的子数组，然后开始归并。归并过程也会完成排序，直至原始数组完全合并并完成排序。</p>
<h3 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5. 快速排序"></a>5. 快速排序</h3><p>【算法思想】：快速排序也许是最常用的排序算法了。和归并排序一样，快速排序也使用分治的方法，将原始数组分为较小的数组（但它没有像归并排序那样将它们分割开）。<br>【O复杂度】：它的复杂度为O(nlog^n) ，且它的性能通常比其他的复杂度为O(nlog^n) 的排序算法要好。<br>【具体做法】：<br>(1)  首先，从数组中选择中间一项作为主元。<br>(2)  创建两个指针，左边一个指向数组第一个项，右边一个指向数组最后一个项。移动左指针直到我们找到一个比主元大的元素，接着，移动右指针直到找到一个比主元小的元素，然后交换它们，重复这个过程，直到左指针超过了右指针。这个过程将使得比主元小的值都排在主元之前，而比主元大的值都排在主元之后。这一步叫作划分操作。<br>(3)  接着，算法对划分后的小数组（较主元小的值组成的子数组，以及较主元大的值组成的子数组）重复之前的两个步骤，直至数组已完全排序。 </p>
<p>【实现代码】：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123; </div><div class="line">   <span class="keyword">return</span> quick(arr, <span class="number">0</span>, arr.length<span class="number">-1</span>); </div><div class="line">&#125;; </div><div class="line"></div><div class="line"><span class="comment">// 声明一个主方法来调用递归函数,传递待排序数组，以及索引0及其最末的位置</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params">arr, left, right</span>)</span>&#123; </div><div class="line">   <span class="keyword">var</span> index;  <span class="comment">// 将子数组分离为较小值数组和较大值数组的索引</span></div><div class="line">   <span class="keyword">if</span> (arr.length &gt; <span class="number">1</span>) &#123;   <span class="comment">// 如果数组的长度比1大（因为只有一个元素的数组必然是已排序了的)</span></div><div class="line">      index = partition(arr, left, right); <span class="comment">// 执行partition操作（第一次调用是针对整个数组）</span></div><div class="line">      </div><div class="line">      <span class="comment">// 划分后的子数组（较主元小的值组成的子数组，以及较主元大的值组成的子数组）递归调用quick函数 </span></div><div class="line">      <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123; </div><div class="line">          quick(arr, left, index - <span class="number">1</span>);     </div><div class="line">      &#125;  </div><div class="line">      <span class="keyword">if</span> (index &lt; right) &#123;   </div><div class="line">          quick(arr, index, right);        </div><div class="line">      &#125; </div><div class="line">   &#125; </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 划分过程</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>) </span>&#123; </div><div class="line">   <span class="keyword">var</span> pivot = arr[<span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>)],  <span class="comment">// 选择中间项作为主元</span></div><div class="line">      i = left,                                      <span class="comment">// left指针</span></div><div class="line">      j = right;                                     <span class="comment">// right指针</span></div><div class="line"> </div><div class="line">   <span class="keyword">while</span> (i &lt;= j) &#123;                   <span class="comment">// 只要left和right 指针没有相互交错，就执行划分操作</span></div><div class="line">      <span class="keyword">while</span> (arr[i] &lt; pivot) &#123;       <span class="comment">// 移动left指针直到找到一个元素比主元大</span></div><div class="line">          i++; </div><div class="line">      &#125; </div><div class="line">      <span class="keyword">while</span> (arr[j] &gt; pivot) &#123;       <span class="comment">// 移动right指针直到我们找到一个元素比主元小</span></div><div class="line">          j--; </div><div class="line">      &#125; </div><div class="line">      <span class="comment">// 当左指针指向的元素比主元大且右指针指向的元素比主元小，并且此时左指针索引没有右指针索引大</span></div><div class="line">      <span class="keyword">if</span> (i &lt;= j) &#123; </div><div class="line">          swapQuickStort(arr, i, j); <span class="comment">// 交换它们，然后移动两个指针，并重复此过程</span></div><div class="line">          i++; </div><div class="line">          j--; </div><div class="line">      &#125; </div><div class="line">   &#125; </div><div class="line">   <span class="keyword">return</span> i; <span class="comment">// 在划分操作结束后，返回左指针的索引</span></div><div class="line">&#125;; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swapQuickStort</span>(<span class="params">arr, index1, index2</span>)</span>&#123; </div><div class="line">   <span class="keyword">var</span> aux = arr[index1]; </div><div class="line">   arr[index1] = arr[index2]; </div><div class="line">   arr[index2] = aux; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>【排序示意图】：[3, 5, 1, 6, 4, 7, 2]</p>
<p><img src="../../../../images/35-6-1.png" alt=""></p>
<p><img src="../../../../images/35-6-2.png" alt=""></p>
<p><img src="../../../../images/35-6-3.png" alt=""></p>
<p><img src="../../../../images/35-6-4.png" alt=""></p>
<p><img src="../../../../images/35-6-5.png" alt=""></p>
<p>注：文中图片引自《JavaScript数据结构与算法》</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文学习自《JavaScript数据结构与算法》，记录JavaScript 中常见的几种排序算法，包括冒泡排序，选择排序，插入排序，归并排序和快速排序。详细介绍算法思想，复杂度，算法代码以及示意图演示。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指offer》JavaScript版——(5)用两个栈实现队列</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/24/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E2%80%94%20JavaScript%EF%BC%885%EF%BC%89%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/24/《剑指offer》— JavaScript（5）用两个栈实现队列/</id>
    <published>2017-07-24T13:33:53.965Z</published>
    <updated>2017-07-24T13:28:49.222Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <strong>题目：</strong>用两个栈来实现一个队列，完成队列的<code>Push</code>和<code>Pop</code>操作。 队列中的元素为<code>int</code>类型。</p>
</blockquote>
<a id="more"></a>
<p><strong>基础知识点：</strong></p>
<p><code>栈（stack）</code>又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p>
<p><code>队列</code>是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p>
<p><strong>思路：</strong><br>入队：将元素进栈1;<br>出队：判断栈2是否为空，如果为空，则将栈1中所有元素<code>pop</code>，并<code>push</code>进栈<code>2</code>，栈<code>2</code>出栈； 如果不为空，栈<code>2</code>直接出栈。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stack1 = [];</div><div class="line"><span class="keyword">var</span> stack2 = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">   stack1.push(node);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">if</span>(stack2.length == <span class="number">0</span>)&#123;</div><div class="line">      <span class="keyword">while</span>(stack1.length &gt; <span class="number">0</span>)&#123;</div><div class="line">         stack2.push(stack1.pop());</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> stack2.pop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;题目：&lt;/strong&gt;用两个栈来实现一个队列，完成队列的&lt;code&gt;Push&lt;/code&gt;和&lt;code&gt;Pop&lt;/code&gt;操作。 队列中的元素为&lt;code&gt;int&lt;/code&gt;类型。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="剑指offer" scheme="https://wenhuiyang-luck.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>《剑指offer》JavaScript版——(4)重建二叉树</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/24/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E2%80%94%20JavaScript%EF%BC%884%EF%BC%89%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/24/《剑指offer》— JavaScript（4）重建二叉树/</id>
    <published>2017-07-24T13:19:53.090Z</published>
    <updated>2017-07-24T13:22:09.127Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <strong>题目：</strong>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列<code>{1,2,4,7,3,5,6,8}</code>和中序遍历序列<code>{4,7,2,1,5,3,8,6}</code>，则重建二叉树并返回。</p>
</blockquote>
<a id="more"></a>
<p>思路：<br>前序遍历的第一个节点就是根节点，中序遍历根节点的左边在根节点的左子树，右边在根节点的右子树。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* function TreeNode(x) &#123;</span></div><div class="line">   this.val = x;</div><div class="line">   this.left = null;</div><div class="line">   this.right = null;</div><div class="line">&#125; */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reConstructBinaryTree</span>(<span class="params">pre, vin</span>) </span>&#123;</div><div class="line">   <span class="keyword">if</span>(pre.length == <span class="number">0</span> || vin.length == <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">var</span> idx = vin.indexOf(pre[<span class="number">0</span>]);    <span class="comment">// 根节点的索引  </span></div><div class="line">   </div><div class="line">   <span class="keyword">var</span> vinleft = vin.slice(<span class="number">0</span>, idx);  <span class="comment">// 中序左子树</span></div><div class="line">   <span class="keyword">var</span> vinright = vin.slice(idx+<span class="number">1</span>);  <span class="comment">// 中序右子树  </span></div><div class="line">   </div><div class="line">   <span class="keyword">var</span> preleft = pre.slice(<span class="number">1</span>,idx+<span class="number">1</span>); <span class="comment">// 前序左子树</span></div><div class="line">   <span class="keyword">var</span> preright = pre.slice(idx+<span class="number">1</span>);  <span class="comment">// 前序右子树    </span></div><div class="line">   <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">val</span>: pre[<span class="number">0</span>],</div><div class="line">      <span class="attr">left</span>: reConstructBinaryTree(preleft, vinleft),  <span class="comment">// 递归</span></div><div class="line">      right: reConstructBinaryTree(preright, vinright)</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;题目：&lt;/strong&gt;输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列&lt;code&gt;{1,2,4,7,3,5,6,8}&lt;/code&gt;和中序遍历序列&lt;code&gt;{4,7,2,1,5,3,8,6}&lt;/code&gt;，则重建二叉树并返回。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="剑指offer" scheme="https://wenhuiyang-luck.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>《剑指offer》JavaScript版——(3)从尾到头打印链表</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/24/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E2%80%94%20JavaScript%EF%BC%883%EF%BC%89%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/24/《剑指offer》— JavaScript（3）从尾到头打印链表/</id>
    <published>2017-07-24T13:19:24.453Z</published>
    <updated>2017-07-24T13:17:44.531Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <strong>题目：</strong>输入一个链表，从尾到头打印链表每个节点的值。</p>
</blockquote>
<a id="more"></a>
<p><strong>基础知识点：</strong><br>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</p>
<p><strong>思路：</strong><br>定义一个数组，将链表的节点依次从头部<code>unshift</code>进数组，将数组输出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*function ListNode(x)&#123;</span></div><div class="line">   this.val = x;</div><div class="line">   this.next = null;</div><div class="line">&#125;*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead</span>(<span class="params">head</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> arr = [];</div><div class="line">   <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">   <span class="keyword">while</span>(head) &#123;</div><div class="line">      arr.unshift(head.val);</div><div class="line">      head = head.next;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;题目：&lt;/strong&gt;输入一个链表，从尾到头打印链表每个节点的值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="剑指offer" scheme="https://wenhuiyang-luck.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>《剑指offer》JavaScript版——(2)替换空格</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/23/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E2%80%94%20JavaScript%EF%BC%882%EF%BC%89%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/23/《剑指offer》— JavaScript（2）替换空格/</id>
    <published>2017-07-23T14:55:57.574Z</published>
    <updated>2017-07-23T15:11:18.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>题目：</strong>请实现一个函数，将一个字符串中的空格替换成<code>%20</code>。例如，当字符串为<code>We Are Happy</code>.则经过替换之后的字符串为<code>We%20Are%20Happy</code>。</p>
</blockquote>
<a id="more"></a>
<p>思路：<br>使用正则表达式，调用<code>replace</code>函数。<br><code>\s</code>匹配任何不可见字符，包括空格、制表符、换页符等等。等价于<code>[\f\n\r\t\v]</code>。</p>
<p>AC代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace</span>(<span class="params">str</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//return str.replace(/\s+?/g, "%20");  // \s+? 非贪婪匹配 </span></div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/\s/g</span>, <span class="string">"%20"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>演示：</p>
<p><img src="../../../../images/offer2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;请实现一个函数，将一个字符串中的空格替换成&lt;code&gt;%20&lt;/code&gt;。例如，当字符串为&lt;code&gt;We Are Happy&lt;/code&gt;.则经过替换之后的字符串为&lt;code&gt;We%20Are%20Happy&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="剑指offer" scheme="https://wenhuiyang-luck.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>《剑指offer》JavaScript版——(1)二维数组中的查找</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/23/%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8B%E2%80%94%20JavaScript%EF%BC%881%EF%BC%89%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/23/《剑指offer》— JavaScript（1）二维数组中的查找/</id>
    <published>2017-07-23T14:50:52.261Z</published>
    <updated>2017-07-23T14:50:29.724Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>题目：</strong>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
</blockquote>
<a id="more"></a>
<p>思路：</p>
<p>有序矩阵，从左下角的元素开始，如果数组元素比target小，则上移；如果比target大，则右移。</p>
<p>AC代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target, array</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> row = array.length;</div><div class="line">    <span class="keyword">var</span> col = array[<span class="number">0</span>].length;</div><div class="line">     </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = row<span class="number">-1</span>,j = <span class="number">0</span>;(i &gt;= <span class="number">0</span>)&amp;&amp;(j &lt; col);)&#123;</div><div class="line">        <span class="keyword">if</span>(target &gt; array[i][j])&#123;</div><div class="line">            j++;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; array[i][j])&#123;</div><div class="line">            i--;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
      <category term="剑指offer" scheme="https://wenhuiyang-luck.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>ES5中新增的Array方法——forEach()</title>
    <link href="https://wenhuiyang-luck.github.io/2017/07/19/ES5%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84Array%E6%96%B9%E6%B3%95/"/>
    <id>https://wenhuiyang-luck.github.io/2017/07/19/ES5中新增的Array方法/</id>
    <published>2017-07-19T14:36:17.739Z</published>
    <updated>2017-07-19T14:47:02.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>forEach</code>是<code>Array</code>新方法中最基本的一个，用于遍历，循环。</p>
</blockquote>
<a id="more"></a>
<h2 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h2><h3 id="1-语法："><a href="#1-语法：" class="headerlink" title="1. 语法："></a>1. 语法：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array.forEach(callback[, thisObject])</div></pre></td></tr></table></figure>
<h3 id="2-参数："><a href="#2-参数：" class="headerlink" title="2. 参数："></a>2. 参数：</h3><p><code>callback</code>：</p>
<p>用来测试每个元素的回调函数。callback被调用时传入三个参数：元素值，元素的索引，原数组。</p>
<p><code>thisObject</code>：</p>
<p>执行 callback 时使用的 this 值，为<strong>可选</strong>参数。如果省略该参数，则 callback  被调用时的 this 值，在非严格模式下为全局对象（浏览器中为window），在严格模式下传入 undefined。</p>
<h3 id="3-实例："><a href="#3-实例：" class="headerlink" title="3. 实例："></a>3. 实例：</h3><p><strong>举例1：数组求和</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 只关心数组元素的值，可以编写只有一个参数的函数，额外的参数将忽略</span></div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].forEach(value) &#123;</div><div class="line">    sum += value;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(sum);  <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p><strong>举例2：每个数组元素的值自加1</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 关注数组元素的值，索引以及数组本身</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, idx, arr</span>) </span>&#123;</div><div class="line">    arr[idx] = item + <span class="number">1</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [2,3,4,5]</span></div></pre></td></tr></table></figure>
<p><strong>举例3：指定this的值</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> database = &#123;</div><div class="line">    <span class="attr">users</span>: [<span class="string">"张含韵"</span>, <span class="string">"江一燕"</span>, <span class="string">"李小璐"</span>],</div><div class="line">    <span class="attr">sendEmail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isValidUser(user)) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"你好，"</span> + user);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"抱歉，"</span>+ user +<span class="string">"，你不是本家人"</span>);	</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isValidUser</span>: <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="regexp">/^张/</span>.test(user);   <span class="comment">// 正则匹配张姓</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 给每个人发邮件</span></div><div class="line">database.users.forEach(database.sendEmail, database);  <span class="comment">// 使用database代替this</span></div><div class="line"></div><div class="line"><span class="comment">// 结果：</span></div><div class="line"><span class="comment">// 你好，张含韵</span></div><div class="line"><span class="comment">// 抱歉，江一燕，你不是本家人</span></div><div class="line"><span class="comment">// 抱歉，李小璐，你不是本家</span></div></pre></td></tr></table></figure>
<p><strong>举例4：forEach不会遍历“空元素”</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,,,<span class="number">3</span>];         <span class="comment">// 未赋值元素的值为undefined</span></div><div class="line"><span class="built_in">console</span>.log(arr.length);   <span class="comment">// 数组长度仍为4</span></div><div class="line">arr.forEach(<span class="built_in">console</span>.log);  <span class="comment">// 遍历结果只打印1和3</span></div></pre></td></tr></table></figure>
<h3 id="5-IE6-8兼容扩展"><a href="#5-IE6-8兼容扩展" class="headerlink" title="5. IE6-8兼容扩展"></a>5. IE6-8兼容扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach != <span class="string">"function"</span>) &#123;</div><div class="line">    <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span> (<span class="params">fn, context</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">        	<span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">"function"</span> &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">        		fn.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);  <span class="comment">// fn.apply(context, [this[i], i, this]);</span></div><div class="line">        	&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-终止循环"><a href="#6-终止循环" class="headerlink" title="6. 终止循环"></a>6. 终止循环</h3><p><code>forEach()</code>无法在所有元素都传递给调用的函数之前终止遍历，也就是说，没有像<code>for</code>循环中使用的相应的<code>break</code>语句。如果要提前终止，必须把<code>forEach()</code>方法放在一个<code>try</code>块中，并能抛出一个异常。如果<code>forEach()</code>调用的函数抛出<code>foreach.break</code>异常，循环会提前终止。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foreach</span>(<span class="params">a,f,t</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;a.forEach(f,t);&#125;</div><div class="line">    <span class="keyword">catch</span>(e) &#123;</div><div class="line">        <span class="keyword">if</span>(e === foreach.break) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">foreach.break = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"StopIteration"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt;是&lt;code&gt;Array&lt;/code&gt;新方法中最基本的一个，用于遍历，循环。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://wenhuiyang-luck.github.io/categories/JavaScript/"/>
    
    
      <category term="Array" scheme="https://wenhuiyang-luck.github.io/tags/Array/"/>
    
      <category term="ES5" scheme="https://wenhuiyang-luck.github.io/tags/ES5/"/>
    
  </entry>
  
  <entry>
    <title>iframe 标签嵌套页面</title>
    <link href="https://wenhuiyang-luck.github.io/2017/05/18/iframe%E5%B5%8C%E5%A5%97%E9%A1%B5%E9%9D%A2/"/>
    <id>https://wenhuiyang-luck.github.io/2017/05/18/iframe嵌套页面/</id>
    <published>2017-05-18T02:04:48.879Z</published>
    <updated>2017-05-18T12:31:16.962Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们常常会希望将某种小效果可以直接在文档中显示，而不是通过一个预览外链来查看效果，<code>iframe</code> 元素就可以实现，它会创建包含另外一个文档的内联框架（即行内框架），<code>iframe</code>相当于浏览器里面有个小浏览器，在这个小浏览器中，打开另一个网页。可根据自己的需求自行设置<code>frameborder</code>及<code>scrolling</code>等属性。</p>
</blockquote>
<a id="more"></a>
<h4 id="1-属性"><a href="#1-属性" class="headerlink" title="1. 属性"></a>1. 属性</h4><p>有标记的是h5新属性</p>
<p><img src="../../../../images/24-1.png" alt=""></p>
<h4 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h4><p>本博客使用<code>markdown</code>编写，只需要在内容中嵌入<code>iframe</code>标签即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://wenhuiyang-luck.github.io/jquery-plugin/手风琴/index.html"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"400px"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一些老的浏览器不支持 iframe。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果得不到支持，iframe 是不可见的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>效果如下：</strong><br>点击试试手风琴效果吧</p>
<iframe src="https://wenhuiyang-luck.github.io/jquery-plugin/%E6%89%8B%E9%A3%8E%E7%90%B4/index.html" width="100%" height="400px" frameborder="0" scrolling="no"></iframe>

]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们常常会希望将某种小效果可以直接在文档中显示，而不是通过一个预览外链来查看效果，&lt;code&gt;iframe&lt;/code&gt; 元素就可以实现，它会创建包含另外一个文档的内联框架（即行内框架），&lt;code&gt;iframe&lt;/code&gt;相当于浏览器里面有个小浏览器，在这个小浏览器中，打开另一个网页。可根据自己的需求自行设置&lt;code&gt;frameborder&lt;/code&gt;及&lt;code&gt;scrolling&lt;/code&gt;等属性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTML/HTML5笔记" scheme="https://wenhuiyang-luck.github.io/categories/HTML-HTML5%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="https://wenhuiyang-luck.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>天猫仿站：4产品页面——基本详情</title>
    <link href="https://wenhuiyang-luck.github.io/2017/05/16/%E5%A4%A9%E7%8C%AB%E4%BB%BF%E7%AB%99%EF%BC%9A4%E4%BA%A7%E5%93%81%E9%A1%B5%E9%9D%A2%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E8%AF%A6%E6%83%85/"/>
    <id>https://wenhuiyang-luck.github.io/2017/05/16/天猫仿站：4产品页面——基本详情/</id>
    <published>2017-05-16T13:51:37.769Z</published>
    <updated>2017-05-16T14:48:38.260Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>产品页面之基本详情页中用到的“左边固定，右边自动占满”布局。相应的写一“左右固定，中间自适应”布局。</p>
</blockquote>
<a id="more"></a>
<p><img src="../../../../images/23-1.png" alt=""></p>
<p><a href="https://wenhuiyang-luck.github.io/Worklists/%E4%BB%BF%E7%AB%99/4-%E4%BA%A7%E5%93%81%E9%A1%B5%E9%9D%A2/4-%E4%BA%A7%E5%93%81%E9%A1%B5%E9%9D%A2_%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF.html">预览地址</a></p>
<h4 id="1-左边固定，右边自动占满"><a href="#1-左边固定，右边自动占满" class="headerlink" title="1. 左边固定，右边自动占满"></a>1. 左边固定，右边自动占满</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">   <span class="attribute">float</span>:left;</div><div class="line">   <span class="attribute">background-color</span>:pink</div><div class="line">  &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">    <span class="attribute">background-color</span>:lightskyblue;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边自动填满<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/hegi/12/edit" target="_blank" rel="external">效果预览</a></p>
<h4 id="2-左右固定，中间自适应的布局（浮动）"><a href="#2-左右固定，中间自适应的布局（浮动）" class="headerlink" title="2. 左右固定，中间自适应的布局（浮动）"></a>2. 左右固定，中间自适应的布局（浮动）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">   <span class="attribute">float</span>:left;</div><div class="line">   <span class="attribute">background-color</span>:pink</div><div class="line">  &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">   <span class="attribute">float</span>:right;</div><div class="line">   <span class="attribute">background-color</span>:pink</div><div class="line">  &#125;</div><div class="line"><span class="selector-class">.center</span> &#123;</div><div class="line">   <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">200px</span>;   </div><div class="line">   <span class="attribute">background-color</span>:lightblue</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/hegi/7/edit" target="_blank" rel="external">效果预览</a></p>
<p>这里需要注意三个<code>div</code>的顺序：<code>左-右-中</code>，中间的<code>div</code>最后写，如果写在中间，会发生什么呢？</p>
<p><a href="http://js.jirengu.com/hegi/14/edit" target="_blank" rel="external">我来瞧瞧发生了什么</a></p>
<p>可以看见最后一个<code>div</code>掉下去了，这是因为中间的div没有设置浮动，放在中间div后面的div会换行。下面介绍用<code>position</code>定位实现这种布局。</p>
<h4 id="3-左右固定，中间自适应的布局（定位）"><a href="#3-左右固定，中间自适应的布局（定位）" class="headerlink" title="3. 左右固定，中间自适应的布局（定位）"></a>3. 左右固定，中间自适应的布局（定位）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">* &#123;</div><div class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">   <span class="attribute">position</span>: absolute;</div><div class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">   <span class="attribute">background-color</span>: pink;</div><div class="line"> &#125;</div><div class="line"><span class="selector-class">.center</span>&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: lightblue;</div><div class="line"> &#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: pink;</div><div class="line"> &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/hegi/16/edit" target="_blank" rel="external">效果预览</a></p>
<p>这种布局就和div的顺序无关了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;产品页面之基本详情页中用到的“左边固定，右边自动占满”布局。相应的写一“左右固定，中间自适应”布局。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/categories/%E4%BB%BF%E7%AB%99/"/>
    
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/tags/%E4%BB%BF%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>天猫仿站：3分类页面——排序和价格</title>
    <link href="https://wenhuiyang-luck.github.io/2017/05/14/%E5%A4%A9%E7%8C%AB%E4%BB%BF%E7%AB%99%EF%BC%9A3%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BB%B7%E6%A0%BC/"/>
    <id>https://wenhuiyang-luck.github.io/2017/05/14/天猫仿站：3分类页面——排序和价格/</id>
    <published>2017-05-14T14:04:56.516Z</published>
    <updated>2017-05-16T13:51:31.821Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>分类页面之排序和价格页面的布局。</p>
</blockquote>
<a id="more"></a>
<p><img src="../../../../images/22-1.png" alt=""></p>
<p><a href="https://wenhuiyang-luck.github.io/Worklists/%E4%BB%BF%E7%AB%99/3-%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2/3-%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2_%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BB%B7%E6%A0%BC.html">预览地址</a></p>
<h4 id="1-HTML结构"><a href="#1-HTML结构" class="headerlink" title="1. HTML结构"></a>1. HTML结构</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"categorySortBarTable categorySortTable"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"grayColumn"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>综合<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>人气<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新品<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>销量<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-arrow-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>价格<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-resize-vertical"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"categorySortBarTable"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span> <span class="attr">class</span>=<span class="string">"sortBarPrice beginPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"grayColumn priceMiddleColumn"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span> <span class="attr">class</span>=<span class="string">"sortBarPrice endPrice"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-表格布局"><a href="#2-表格布局" class="headerlink" title="2. 表格布局"></a>2. 表格布局</h4><p>要实现上述效果中显示的，使排序项排列在一行，有多种方式，如float，inline，inline-block。<br>此处，我们要实现的效果不仅是排列在一行，此外每个排序项还需要边框，倘若不使用表格来做，而是使用span的border样式来做边框，那么相邻的两个span的边框会挨再一起，就是二倍宽度，看上去过粗。 为了解决过粗的问题，需要对每个span进行仅仅设置左边框，或者右边框，显而易见，此时增加了设置样式的复杂度。而使用table，只需要为td设置border边框，就可以达到效果。 容易很多，维护起来也更简单。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span><span class="selector-class">.categorySortBarTable</span> &#123;</div><div class="line">   <span class="attribute">border-collapse</span>: collapse;  <span class="comment">/*单元格之间没有空隙*/</span></div><div class="line">   <span class="attribute">display</span>: inline-block;      <span class="comment">/*显示为内联，既可以设置大小，又能够不换行*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">table</span><span class="selector-class">.categorySortBarTable</span> <span class="selector-tag">td</span> &#123;</div><div class="line">   <span class="attribute">height</span>: <span class="number">17px</span>;</div><div class="line">   <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">   <span class="attribute">padding</span>: <span class="number">3px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于border-collapse属性：<br>border-collapse: separate(默认,边框分隔) | collapse(边框合并)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">table</span><span class="selector-class">.t1</span>&#123;</div><div class="line">   <span class="attribute">border-collapse</span>:separate;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">table</span><span class="selector-class">.t2</span>&#123;</div><div class="line">   <span class="attribute">border-collapse</span>:collapse;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"t1"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框分离<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框分离<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"t2"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>边框合并<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/geyas/2/edit" target="_blank" rel="external">预览</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分类页面之排序和价格页面的布局。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/categories/%E4%BB%BF%E7%AB%99/"/>
    
    
      <category term="仿站" scheme="https://wenhuiyang-luck.github.io/tags/%E4%BB%BF%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript算法题（1）—— Return Largest Numbers in Arrays</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/25/JavaScript%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94Return%20Largest%20Numbers%20in%20Arrays/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/25/JavaScript算法题（1）——Return Largest Numbers in Arrays/</id>
    <published>2017-04-25T02:03:57.160Z</published>
    <updated>2017-05-01T05:16:21.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.</p>
</blockquote>
<a id="more"></a>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">largestOfFour([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]);</div></pre></td></tr></table></figure>
<h2 id="1-Basic-Code-Solution"><a href="#1-Basic-Code-Solution" class="headerlink" title="1. Basic Code Solution"></a>1. Basic Code Solution</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> results = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">    <span class="keyword">var</span> largestNumber = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++)&#123;</div><div class="line">      <span class="keyword">if</span>(arr[i][j] &gt; largestNumber) &#123;</div><div class="line">        largestNumber = arr[i][j];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    results[i] = largestNumber;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>算法说明：</p>
<ul>
<li>创建results变量存储返回的结果数组；</li>
<li>创建一个外部循还遍历外层数组；<ul>
<li>创建内层循还遍历每一个内层数组，寻找最大值，存储在变量largestNumber中；</li>
<li>将每一个内层数组中的最大值保存在results中的相应位置；</li>
</ul>
</li>
<li>返回结果数组。</li>
</ul>
<h2 id="2-Intermediate-Code-Solution"><a href="#2-Intermediate-Code-Solution" class="headerlink" title="2. Intermediate Code Solution"></a>2. Intermediate Code Solution</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span><span class="params">(arr)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span><span class="params">(group)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> group.reduce(<span class="function"><span class="keyword">function</span><span class="params">(prev, current)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> (current &gt; prev) ? current:prev;</div><div class="line">    &#125;,<span class="number">0</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map?v=example" target="_blank" rel="external">Array.prototype.map()</a></li>
</ul>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=example" target="_blank" rel="external">Array.prototype.reduce()</a></li>
</ul>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank" rel="external">Ternary Operators(三元运算)</a></li>
</ul>
<h2 id="3-Advanced-Code-Solution"><a href="#3-Advanced-Code-Solution" class="headerlink" title="3. Advanced Code Solution"></a>3. Advanced Code Solution</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> largestOfFour(arr) &#123;</div><div class="line">  <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">Function</span>.<span class="title">apply</span></span>.<span class="keyword">bind</span>(Math.<span class="built_in">max</span>, null));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">Function.prototype.apply()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">Function.prototype.bind()</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="JavaScript" scheme="https://wenhuiyang-luck.github.io/tags/JavaScript/"/>
    
      <category term="Arrays" scheme="https://wenhuiyang-luck.github.io/tags/Arrays/"/>
    
      <category term="算法题" scheme="https://wenhuiyang-luck.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>CSS sprites原理</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/24/CSS%20sprites%E5%8E%9F%E7%90%86/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/24/CSS sprites原理/</id>
    <published>2017-04-24T09:30:03.115Z</published>
    <updated>2017-05-01T05:13:34.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>解释CSS sprites原理及优缺点。</p>
</blockquote>
<a id="more"></a>
<p><code>CSS sprites</code>其实就是把网页中一些背景图片整合到一张图片中，再利用<code>CSS</code>的<code>background-image</code>，<code>background-repeat</code>，<code>background-position</code>的组合进行背景定位，<code>background-position</code>可以用数字精确的定位出背景图片的位置。</p>
<p><strong>优点：</strong></p>
<ol>
<li>减少网页的<code>http</code>请求。</li>
<li>减少图片的字节。</li>
<li>解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。</li>
<li>更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>在宽屏，高分辨率的屏幕下的自适应页面，图片如果不够宽，很容易出现背景断裂。</li>
<li><code>CSS sprites</code>在开发的时候，要通过<code>photoshop</code>或其他工具测量计算每一个背景单元的精确位置。</li>
<li>在维护的时候比较麻烦，如果页面背景有少许改动，一般就要改这张合并的图片。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解释CSS sprites原理及优缺点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>如何解决 “Another git process seems to be running in this repository”</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/23/How%20to%20fix%20error%20%E2%80%9CAnother%20git%20process%20seems%20to%20be%20running%20in%20this%20repository%E2%80%9D/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/23/How to fix error “Another git process seems to be running in this repository”/</id>
    <published>2017-04-23T03:57:22.281Z</published>
    <updated>2017-05-01T05:15:55.600Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>解决 git 推送中 “Another git process seems to be running in this repository” 问题。</p>
</blockquote>
<a id="more"></a>
<p><strong>错误：</strong></p>
<p><code>git bash</code>使用命令行<code>git commit</code>提交修改时，还未提交成功，就点了关闭按钮。再次提交时，出现了如下错误。</p>
<p><img src="../../../../images/19-1.png" alt=""></p>
<p>意思是说，当前已有一个编辑器打开了<code>“git commit”</code>指令，请关闭所有<code>git</code>相关的进程重试，否则，请手动删除那个文件。</p>
<p><strong>解决办法：</strong></p>
<p>根据我们所了解到的，<code>windows</code>对于进程的同步互斥管理，是有资源上锁机制的。猜测这里肯定是有进程对某资源进行了加锁，但是由于进程突然崩溃，未来得及解锁，导致其他进程访问不了。进入工作区目录下的隐藏文件夹<code>.git</code>中，可以看到有<code>index.lock</code>文件，只需要删除此文件，就可解决问题。</p>
<p>使用如下命令删除<code>index.lock</code>文件：</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm .git/<span class="keyword">index</span>.lock</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解决 git 推送中 “Another git process seems to be running in this repository” 问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="错误整理" scheme="https://wenhuiyang-luck.github.io/categories/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Github" scheme="https://wenhuiyang-luck.github.io/tags/Github/"/>
    
      <category term="Git" scheme="https://wenhuiyang-luck.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CSS浮动</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/20/CSS%E6%B5%AE%E5%8A%A8/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/20/CSS浮动/</id>
    <published>2017-04-20T07:06:35.214Z</published>
    <updated>2017-05-01T05:13:57.553Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>介绍CSS浮动，浮动对父级元素和布局的影响，以及清除浮动的方法。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-CSS浮动"><a href="#1-CSS浮动" class="headerlink" title="1. CSS浮动"></a>1. CSS浮动</h2><p>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</p>
<p>当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘：</p>
<p><img src="http://www.w3school.com.cn/i/ct_css_positioning_floating_right_example.gif" alt=""></p>
<p>当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。</p>
<p>如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。</p>
<p><img src="http://www.w3school.com.cn/i/ct_css_positioning_floating_left_example.gif" alt=""></p>
<p>如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”：</p>
<p><img src="http://www.w3school.com.cn/i/ct_css_positioning_floating_left_example_2.gif" alt=""></p>
<h2 id="2-浮动的影响"><a href="#2-浮动的影响" class="headerlink" title="2. 浮动的影响"></a>2. 浮动的影响</h2><h3 id="2-1-浮动对父级元素的影响"><a href="#2-1-浮动对父级元素的影响" class="headerlink" title="2.1 浮动对父级元素的影响"></a>2.1 浮动对父级元素的影响</h3><p>父级元素出现高度坍塌的问题。</p>
<p>解析：当没有为父元素设置高度时，父级元素的高度是由子元素的高度撑开的，当子元素浮动之后，就会脱离文档流，相当于是不存在于父级元素中，那么父级元素的高度就会塌陷为“0”。</p>
<h3 id="2-2-浮动对布局的影响"><a href="#2-2-浮动对布局的影响" class="headerlink" title="2.2 浮动对布局的影响"></a>2.2 浮动对布局的影响</h3><p>1.浮动能实现多个块元素处于同一行；<br>2.子级浮动会使父级出现高度塌陷问题；<br>3.浮动元素会对后面的兄弟级元素造成影响。</p>
<h2 id="3-清除浮动"><a href="#3-清除浮动" class="headerlink" title="3. 清除浮动"></a>3. 清除浮动</h2><p>正是因为浮动的这种特性，导致本属于普通流中的元素浮动之后，包含框中由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）。在实际布局中，往往这并不是我们所希望的，所以需要清除浮动，使其包含框表现出正常的高度。</p>
<h3 id="3-1-使用空标签清浮动"><a href="#3-1-使用空标签清浮动" class="headerlink" title="3.1 使用空标签清浮动"></a>3.1 使用空标签清浮动</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"clear:both;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<p>优点：通俗易懂，容易掌握<br>缺点：增加无意义的空标签，后期维护不方便，不推荐使用。</p>
<h3 id="3-2-使用br标签清浮动"><a href="#3-2-使用br标签清浮动" class="headerlink" title="3.2 使用br标签清浮动"></a>3.2 使用br标签清浮动</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float:left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float:left;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">br</span> <span class="attr">clear</span>=<span class="string">"all"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>优点：比空标签方式语义稍强，代码量较少。<br>缺点：同样有违结构与表现的分离，不推荐使用。</p>
<h3 id="3-3-父级div定义-overflow-hidden"><a href="#3-3-父级div定义-overflow-hidden" class="headerlink" title="3.3 父级div定义 overflow: hidden"></a>3.3 父级div定义 overflow: hidden</h3><p>通过设置父元素overflow值设置为hidden；在IE6中还需要触发 hasLayout ，例如 zoom：1；</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"overflow:hidden; *zoom:1;"</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  </div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<p>优点：不存在结构和语义化问题，代码量极少。<br>缺点：无法显示溢出部分，不推荐使用。</p>
<h3 id="3-4-让父级发生浮动"><a href="#3-4-让父级发生浮动" class="headerlink" title="3.4 让父级发生浮动"></a>3.4 让父级发生浮动</h3><p>优点：不存在结构和语义化问题，代码量极少。<br>缺点：使得与父元素相邻的元素的布局会受到影响，不可能一直浮动到body，不推荐使用。</p>
<h3 id="3-5-利用after伪元素清浮动"><a href="#3-5-利用after伪元素清浮动" class="headerlink" title="3.5 利用after伪元素清浮动"></a>3.5 利用after伪元素清浮动</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>＝<span class="string">"clearfix"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:right;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> style=<span class="string">"float:left;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span> &#123;*zoom:<span class="number">1</span>;&#125;</div><div class="line"><span class="selector-class">.clearfix</span>:after &#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">'.'</span>;</div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="attribute">height</span>:<span class="number">0px</span>;</div><div class="line">    <span class="attribute">clear</span>:both;</div><div class="line">    <span class="attribute">visibility</span>: hidden; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.<code>content:&quot;.&quot;;</code>  生成内容作为最后一个元素<br>2.<code>display:block;</code>  使生成的元素以块级元素显示，占满剩余空间;<br>3.<code>height:0px;</code>  避免生成内容破坏原有布局的高度。<br>4.<code>visibility:hidden;</code>  使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;</p>
<p>优点：结构和语义化完全正确，代码量居中。<br>缺点：复用方式不当会造成代码量增加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍CSS浮动，浮动对父级元素和布局的影响，以及清除浮动的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>position定位属性</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/20/position%E5%AE%9A%E4%BD%8D%E5%B1%9E%E6%80%A7/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/20/position定位属性/</id>
    <published>2017-04-20T03:31:05.652Z</published>
    <updated>2017-05-01T05:14:15.431Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>介绍position定位属性，绝对/固定定位的定位原理以及绝对/相对定位的区别。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-position定位属性有哪些"><a href="#1-position定位属性有哪些" class="headerlink" title="1. position定位属性有哪些"></a>1. position定位属性有哪些</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">position: static | <span class="type">relative</span> | <span class="type">absolute</span> | <span class="type">fixed</span> | <span class="type">inherit</span></div></pre></td></tr></table></figure>
<ul>
<li>static：默认值，没有定位；</li>
<li>relative：生成相对定位元素，相对于其正常位置进行定位；</li>
<li>absolute：生成绝对定位元素，相对于static以外的第一个父元素进行定位；</li>
<li>fixed：生成固定定位的元素，相对于浏览器窗口进行定位；</li>
<li>inherit：规定从父元素继承position属性的值。</li>
</ul>
<h2 id="2-绝对-固定定位的定位原理"><a href="#2-绝对-固定定位的定位原理" class="headerlink" title="2. 绝对/固定定位的定位原理"></a>2. 绝对/固定定位的定位原理</h2><ul>
<li><p><strong>绝对定位</strong>：absolute 相对于设置了除static定位以外的第一个父元素进行定位；</p>
</li>
<li><p><strong>固定定位</strong>：fixed相对于浏览器窗口进行定位</p>
<p>解析：</p>
</li>
</ul>
<ol>
<li>如果父级（无限）没有设定position属性，那么当前的absolute则结合top，right，left，bottom属性以浏览器左上角为原始点进行定位。</li>
<li>如果父级（无限）设定position属性，且属性值为relative、absolute、fixed，那么当前的absolute则结合top，right，left，bottom属性以父级（最近）的左上角为原始点进行定位。</li>
</ol>
<h2 id="3-绝对-相对定位的区别"><a href="#3-绝对-相对定位的区别" class="headerlink" title="3. 绝对/相对定位的区别"></a>3. 绝对/相对定位的区别</h2><p>​    主要从二者是否脱离文档流、是否会重叠、定位的参照物方面进行比较：</p>
<ol>
<li>相对定位不会脱离文档流，绝对定位脱离文档流；</li>
<li>绝对定位的元素相互层叠，相对定位的元素不会；</li>
<li>绝对定位的元素相对于static以外的第一个父元素进行定位，相对定位相对于其正常位置进行定位。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍position定位属性，绝对/固定定位的定位原理以及绝对/相对定位的区别。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>a标签伪类的书写顺序及原因</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/19/a%E6%A0%87%E7%AD%BE%E4%BC%AA%E7%B1%BB%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F%E5%8F%8A%E5%8E%9F%E5%9B%A0/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/19/a标签伪类的书写顺序及原因/</id>
    <published>2017-04-19T14:10:52.322Z</published>
    <updated>2017-05-01T05:18:24.010Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>a 标签书写顺序：<code>:link</code>, <code>:visited</code>,  <code>:hover</code>,  <code>:active</code>;  简记：<code>lvha</code>。</p>
</blockquote>
<a id="more"></a>
<ol>
<li>链接未进行访问时，显示 link 样式，也就是链接的默认样式；</li>
<li>当访问过了该链接，显示 visited 样式，由于两种选择器的优先级相等，必须让 visited 样式覆盖 link 样式，因此要先写 link 样式；</li>
<li>当鼠标移动到链接上时，可能是未访问也可能是已经访问， hover 样式要能够覆盖另外两种样式，因此 hover 要放在 visited 的后面；</li>
<li>当鼠标按下时，鼠标处于 a 标签之上（ hover 效果也处于激活状态），为了能够区分悬停和按下，需要让 active 样式覆盖 hover 样式，即 active 的样式放置在最后。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;a 标签书写顺序：&lt;code&gt;:link&lt;/code&gt;, &lt;code&gt;:visited&lt;/code&gt;,  &lt;code&gt;:hover&lt;/code&gt;,  &lt;code&gt;:active&lt;/code&gt;;  简记：&lt;code&gt;lvha&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>七种隐藏元素的方法</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/19/%E4%B8%83%E7%A7%8D%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/19/七种隐藏元素的方法/</id>
    <published>2017-04-19T13:46:02.177Z</published>
    <updated>2017-05-01T05:14:21.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>列举七种隐藏元素的方法。</p>
</blockquote>
<a id="more"></a>
<ol>
<li><code>visiable:hidden;</code>这个属性只是简单的隐藏某个元素，但是元素占用文档空间。<ol>
<li><code>opacity:0;</code>CSS3属性，可以使一个元素完全透明，与<code>visiable:hidden</code>效果相同。与<code>visiable</code>相比，它可以设置transition和animate。</li>
</ol>
</li>
<li><code>position:absolute;</code>使元素脱离文档流，处于普通文档之上，给它设置一个很大的<code>left</code>负值定位，使元素定位在可见区域之外。</li>
<li><code>display:none;</code>元素变得不可见，与<code>visiable:hidden</code>不同的是不会占用文档空间。</li>
<li><code>transform:scale(0);</code>将一个元素设置为无限小，这个元素将不可见，但是元素占用的空间仍然保留。</li>
<li><code>height:0;overflow:hidden;</code>将元素的高度设置为0，只要元素没有可见的边框，就可以使元素消失。</li>
<li><code>filter:blur(0);</code>将元素的模糊度设为0，从而使这个元素“消失”在页面中。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;列举七种隐藏元素的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS/CSS3笔记" scheme="https://wenhuiyang-luck.github.io/categories/CSS-CSS3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="https://wenhuiyang-luck.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>事件绑定</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/11/%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/11/事件绑定/</id>
    <published>2017-04-11T12:56:31.683Z</published>
    <updated>2017-05-01T05:15:04.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ol>
<li>如何在选定的元素上绑定一个或多个事件处理函数;</li>
<li>绑定鼠标滚轮事件;</li>
<li>如何判断鼠标滚轮方向;</li>
<li>绑定键盘方向键.</li>
</ol>
</blockquote>
<a id="more"></a>
<h4 id="1-如何在选定的元素上绑定一个或多个事件处理函数？"><a href="#1-如何在选定的元素上绑定一个或多个事件处理函数？" class="headerlink" title="1. 如何在选定的元素上绑定一个或多个事件处理函数？"></a>1. 如何在选定的元素上绑定一个或多个事件处理函数？</h4><p>语法：<code>on(events[,selector][,data],handler(eventObject))</code></p>
<p>描述：</p>
<ul>
<li><code>events</code>: 一个或多空格分隔的事件类型，例如 click keydown。</li>
<li><code>selector</code>: 一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素，如果为 null，那么被选中的元素总是能触发事件。</li>
<li><code>data</code>: 事件触发时，要传递给处理函数的 event.data。</li>
<li><code>handler(eventObject)</code>: 事件触发时，执行的函数。</li>
</ul>
<h4 id="2-绑定鼠标滚轮事件"><a href="#2-绑定鼠标滚轮事件" class="headerlink" title="2. 绑定鼠标滚轮事件"></a>2. 绑定鼠标滚轮事件</h4><ol>
<li>包括IE6浏览器在内都使用 mouseWheel, 而只有火狐浏览器使用 DOMMouseScroll;</li>
<li><code>$(document).on(&quot;mouseWheel DOMMouseScroll&quot;,handler)</code>.</li>
</ol>
<h4 id="3-如何判断鼠标滚轮方向"><a href="#3-如何判断鼠标滚轮方向" class="headerlink" title="3. 如何判断鼠标滚轮方向"></a>3. 如何判断鼠标滚轮方向</h4><ol>
<li>其他浏览器通过 wheeldalta 属性来判断，但是火狐浏览器没有这个属性，可以通过 detail 属性判断；</li>
<li>开发中发现每次向下滚动时，wheeldalta 都是-120，但是detail确是3，火狐浏览器方向判断的数值正负与其他浏览器是相反的。</li>
</ol>
<h4 id="4-绑定键盘方向键"><a href="#4-绑定键盘方向键" class="headerlink" title="4. 绑定键盘方向键"></a>4. 绑定键盘方向键</h4><ul>
<li>IE：只有<code>keyCode</code>属性;</li>
<li>Firefox：有<code>which</code>和<code>charCode</code>属性;</li>
<li>Opera：有<code>keyCode</code>和<code>which</code>属性;</li>
</ul>
<p>但是 jQuery 已经解决了这个兼容问题，通过<code>.witch</code>属性和<code>.keyCode</code>属性来确定按下了哪个键：</p>
<ul>
<li>arrow up：37</li>
<li>arrow left：38</li>
<li>arrow right：39</li>
<li>arrow down：40</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).on(<span class="string">"keydown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> keyCode = e.keyCode;</div><div class="line">    <span class="keyword">if</span>(keyCode == <span class="number">37</span> || keyCode == <span class="number">38</span>)&#123;</div><div class="line">    	...</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(keyCode == <span class="number">39</span> || keyCode == <span class="number">40</span>)&#123;</div><div class="line">		...</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如何在选定的元素上绑定一个或多个事件处理函数;&lt;/li&gt;
&lt;li&gt;绑定鼠标滚轮事件;&lt;/li&gt;
&lt;li&gt;如何判断鼠标滚轮方向;&lt;/li&gt;
&lt;li&gt;绑定键盘方向键.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript笔记" scheme="https://wenhuiyang-luck.github.io/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://wenhuiyang-luck.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>如何解决failed to push some refs to git</title>
    <link href="https://wenhuiyang-luck.github.io/2017/04/06/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3failed%20to%20push%20some%20refs%20to%20git/"/>
    <id>https://wenhuiyang-luck.github.io/2017/04/06/如何解决failed to push some refs to git/</id>
    <published>2017-04-06T09:38:20.341Z</published>
    <updated>2017-05-01T05:16:08.397Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>由于Github中的README.md文件不在本地代码目录中，导致执行git push -u origin master 时出现错误。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git commit -m <span class="string">"first commit"</span></div><div class="line">git remote <span class="keyword">add</span><span class="bash"> origin your Github repository</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<h5 id="1-在使用git-对源代码进行push到Github时出现如下错误信息："><a href="#1-在使用git-对源代码进行push到Github时出现如下错误信息：" class="headerlink" title="1. 在使用git 对源代码进行push到Github时出现如下错误信息："></a>1. 在使用git 对源代码进行push到Github时出现如下错误信息：</h5><p><code>error: failed to push some refs to</code></p>
<p><img src="../../../../images/13-1.png" alt=""></p>
<h5 id="2-出现错误的主要原因是Github中的README-md文件不在本地代码目录中"><a href="#2-出现错误的主要原因是Github中的README-md文件不在本地代码目录中" class="headerlink" title="2. 出现错误的主要原因是Github中的README.md文件不在本地代码目录中."></a>2. 出现错误的主要原因是Github中的README.md文件不在本地代码目录中.</h5><p>可以通过如下命令进行代码合并[ 注：pull=fetch+merge]</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull <span class="comment">--rebase origin master</span></div></pre></td></tr></table></figure>
<h5 id="3-执行上面代码后可以看到本地代码库中多了README-md文件"><a href="#3-执行上面代码后可以看到本地代码库中多了README-md文件" class="headerlink" title="3. 执行上面代码后可以看到本地代码库中多了README.md文件."></a>3. 执行上面代码后可以看到本地代码库中多了README.md文件.</h5><p>此时再执行以下语句即可完成代码上传到Github.</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于Github中的README.md文件不在本地代码目录中，导致执行git push -u origin master 时出现错误。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="错误整理" scheme="https://wenhuiyang-luck.github.io/categories/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
    
    
      <category term="Git" scheme="https://wenhuiyang-luck.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
